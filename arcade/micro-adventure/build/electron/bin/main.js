// Generated by Haxe 4.1.5
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.foreach = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(!f(x1)) {
			return false;
		}
	}
	return true;
};
Lambda.fold = function(it,f,first) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		first = f(x1,first);
	}
	return first;
};
Lambda.find = function(it,f) {
	var v = $getIterator(it);
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
Math.__name__ = "Math";
var feint_Application = function(settings) {
	this.lastFrameTimestamp = 0;
	if(feint_Application.application != null) {
		throw new feint_debug_FeintException("ApplicationAlreadyCreated","Only one Application can run at the same time.");
	}
	feint_debug_Logger.info("Application starting...");
	this.settings = settings;
	this.setup();
	this.init();
	this.start();
};
$hxClasses["feint.Application"] = feint_Application;
feint_Application.__name__ = "feint.Application";
feint_Application.prototype = {
	init: function() {
	}
	,setup: function() {
		if(this.settings.noDefaultRenderer == null || this.settings.noDefaultRenderer == false) {
			this.window = new feint_Window(this.settings.title,this.settings.size.width,this.settings.size.height,this.settings.api);
			this.renderer = new feint_renderer_Renderer(this.window.renderContext);
		}
		this.game = new feint_Game(this.renderer,this.window);
		this.game.application = this;
	}
	,setupRenderer: function(settings) {
		this.window = new feint_Window(settings.title,settings.size.width,settings.size.height,settings.api);
		this.renderer = new feint_renderer_Renderer(this.window.renderContext);
		this.game.renderer = this.renderer;
		this.game.window = this.window;
		this.game.application = this;
	}
	,update: function(elapsed) {
		this.window.inputManager.update(elapsed);
		this.game.update(elapsed);
	}
	,render: function(renderer) {
		this.game.render();
	}
	,start: function() {
		this.requestFirstFrame();
	}
	,requestFirstFrame: function() {
		var _gthis = this;
		this.framesProcessed = 0;
		this.startTimestamp = 0;
		this.lifetimeFPS = 0;
		this.fps = 0;
		window.requestAnimationFrame(function(timestamp) {
			_gthis.lastFrameTimestamp = timestamp;
			_gthis.framesProcessed = 0;
			_gthis.fps = 0;
			_gthis.lifetimeFPS = 0;
			_gthis.startTimestamp = timestamp;
			_gthis.requestFrame();
		});
	}
	,requestFrame: function() {
		window.requestAnimationFrame($bind(this,this.onFrame));
	}
	,onFrame: function(timestamp) {
		this.framesProcessed++;
		var elapsed = timestamp - this.lastFrameTimestamp;
		this.lastFrameTimestamp = timestamp;
		this.lifetimeFPS = 1000 * this.framesProcessed / (timestamp - this.startTimestamp);
		this.fps = 0.95 * this.fps + 0.05 * (1000 / elapsed);
		this.update(elapsed);
		this.render(this.renderer);
		this.requestFrame();
	}
	,__class__: feint_Application
};
var MicroAdventure = function(settings) {
	feint_Application.call(this,settings);
};
$hxClasses["MicroAdventure"] = MicroAdventure;
MicroAdventure.__name__ = "MicroAdventure";
MicroAdventure.main = function() {
	var config_title = "Micro Adventure";
	var config_window_height = 640;
	var config_window_width = 640;
	new MicroAdventure({ title : config_title, size : { width : config_window_width, height : config_window_height}, api : feint_renderer_RenderAPI.WebGL});
};
MicroAdventure.__super__ = feint_Application;
MicroAdventure.prototype = $extend(feint_Application.prototype,{
	init: function() {
		this.game.setInitialScene(new scenes_TitleScreenScene());
	}
	,__class__: MicroAdventure
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
var feint_Game = function(renderer,$window) {
	this.showDebugUI = false;
	this.frameRenderTime = 0;
	this.frameUpdateTime = 0;
	this.renderer = renderer;
	this.window = $window;
	this.debugCamera = new feint_renderer_Camera();
};
$hxClasses["feint.Game"] = feint_Game;
feint_Game.__name__ = "feint.Game";
feint_Game.prototype = {
	update: function(elapsed) {
		var updateTime = new Date().getTime();
		if(this.nextScene != null) {
			var c = js_Boot.getClass(this.nextScene);
			feint_debug_Logger.info("Switching to scene: " + c.__name__);
			this.activeScene = this.nextScene;
			this.renderer.set_camera(null);
			this.nextScene = null;
		}
		this.frameElapsed = elapsed;
		if(this.activeScene != null) {
			this.activeScene.update(elapsed);
		}
		if(this.window != null) {
			if(this.window.inputManager.keyboard.keys.get(192) == feint_input_device_KeyState.JustPressed) {
				this.showDebugUI = !this.showDebugUI;
			}
		}
		this.frameUpdateTime = new Date().getTime() - updateTime;
	}
	,render: function() {
		if(this.renderer == null) {
			return;
		}
		var renderTime = new Date().getTime();
		this.renderer.clear();
		if(this.activeScene != null) {
			this.renderer.set_camera(this.activeScene.camera);
			this.activeScene.render(this.renderer);
		}
		if(this.renderer.renderContext.api == feint_renderer_RenderAPI.WebGL) {
			var webGLRenderContext = js_Boot.__cast(this.renderer.renderContext , feint_renderer_backends_WebGLRenderContext);
			if(webGLRenderContext.batchRender.rects.length > 0) {
				this.renderer.submit();
			}
		}
		this.frameRenderTime = new Date().getTime() - renderTime;
		if(this.showDebugUI) {
			this.renderer.set_camera(this.debugCamera);
			this.renderer.drawRect(4,4,130,62,0,-1157627904,1.0,0.0);
			new feint_graphics_BitmapText("FPS: " + this.get_fps()).draw(this.renderer,8,10,16);
			new feint_graphics_BitmapText("Update: " + this.frameUpdateTime + "ms").draw(this.renderer,8,28,16);
			new feint_graphics_BitmapText("Render: " + this.frameRenderTime + "ms").draw(this.renderer,8,46,16);
			this.renderer.submit();
		}
	}
	,setInitialScene: function(scene) {
		var c = js_Boot.getClass(scene);
		feint_debug_Logger.info("Initializing game with scene: " + c.__name__);
		this.activeScene = scene;
		this.activeScene.game = this;
		this.activeScene.init();
		return this.activeScene;
	}
	,changeScene: function(scene) {
		var c = js_Boot.getClass(scene);
		feint_debug_Logger.info("Requesting scene change: " + c.__name__);
		this.nextScene = scene;
		this.nextScene.game = this;
		this.nextScene.init();
		return this.activeScene;
	}
	,get_fps: function() {
		return Math.round(this.application.fps);
	}
	,__class__: feint_Game
};
var feint_Window = function(title,width,height,api) {
	if(api == null) {
		api = feint_renderer_RenderAPI.WebGL;
	}
	this.title = title;
	this.width = width;
	this.height = height;
	this.renderContext = feint_renderer_platforms_WebRenderPlatform.createContext(width,height,api);
	this.inputManager = new feint_input_InputManager(this.renderContext);
};
$hxClasses["feint.Window"] = feint_Window;
feint_Window.__name__ = "feint.Window";
feint_Window.prototype = {
	__class__: feint_Window
};
var feint_assets_macros_ApplicationSettings = function() { };
$hxClasses["feint.assets.macros.ApplicationSettings"] = feint_assets_macros_ApplicationSettings;
feint_assets_macros_ApplicationSettings.__name__ = "feint.assets.macros.ApplicationSettings";
var feint_assets_macros_AssetEmbed = function() { };
$hxClasses["feint.assets.macros.AssetEmbed"] = feint_assets_macros_AssetEmbed;
feint_assets_macros_AssetEmbed.__name__ = "feint.assets.macros.AssetEmbed";
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	toString: function() {
		return this.get_message();
	}
	,get_message: function() {
		return this.message;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var feint_debug_FeintException = function(name,message) {
	haxe_Exception.call(this,"[Feint] " + name + ": " + message);
};
$hxClasses["feint.debug.FeintException"] = feint_debug_FeintException;
feint_debug_FeintException.__name__ = "feint.debug.FeintException";
feint_debug_FeintException.__super__ = haxe_Exception;
feint_debug_FeintException.prototype = $extend(haxe_Exception.prototype,{
	__class__: feint_debug_FeintException
});
var feint_debug_Logger = function() { };
$hxClasses["feint.debug.Logger"] = feint_debug_Logger;
feint_debug_Logger.__name__ = "feint.debug.Logger";
feint_debug_Logger.error = function(message) {
	console.error("[Feint] Error: " + message);
};
feint_debug_Logger.warn = function(message) {
	console.warn("[Feint] Warning: " + message);
};
feint_debug_Logger.info = function(message) {
	console.info("[Feint] " + message);
};
var feint_forge_ComponentType = {};
feint_forge_ComponentType._new = function(name) {
	var this1 = name;
	return this1;
};
feint_forge_ComponentType.fromClass = function(componentClass) {
	return componentClass.__name__;
};
var feint_forge_Component = function() { };
$hxClasses["feint.forge.Component"] = feint_forge_Component;
feint_forge_Component.__name__ = "feint.forge.Component";
feint_forge_Component.prototype = {
	getComponentType: function() {
		var c = js_Boot.getClass(this);
		return c.__name__;
	}
	,__class__: feint_forge_Component
};
var feint_forge_Entity = function() { };
$hxClasses["feint.forge.Entity"] = feint_forge_Entity;
feint_forge_Entity.__name__ = "feint.forge.Entity";
feint_forge_Entity.create = function() {
	return feint_forge_Entity.nextId++;
};
var feint_forge_Forge = function() {
	this.map = new haxe_ds_IntMap();
	this.entityLabels = new haxe_ds_IntMap();
	this.labelMap = new haxe_ds_StringMap();
	this.renderSystems = [];
	this.systems = [];
	this.components = new haxe_ds_StringMap();
	this.entities = [];
};
$hxClasses["feint.forge.Forge"] = feint_forge_Forge;
feint_forge_Forge.__name__ = "feint.forge.Forge";
feint_forge_Forge.prototype = {
	update: function(elapsed) {
		var _g = 0;
		var _g1 = this.systems;
		while(_g < _g1.length) {
			var system = _g1[_g];
			++_g;
			system.update(elapsed,this);
		}
	}
	,render: function(renderer) {
		var _g = 0;
		var _g1 = this.renderSystems;
		while(_g < _g1.length) {
			var renderSystem = _g1[_g];
			++_g;
			renderSystem.render(renderer,this);
		}
	}
	,createEntity: function(comps,labels) {
		this.addEntity(feint_forge_Entity.create(),comps,labels);
	}
	,addEntity: function(id,comps,labels) {
		this.entities.push(id);
		var v = [];
		this.map.h[id] = v;
		var _g = 0;
		while(_g < comps.length) {
			var component = comps[_g];
			++_g;
			component.entity = id;
			var this1 = this.components;
			var c = js_Boot.getClass(component);
			var key = c.__name__;
			if(this1.h[key] == null) {
				var this2 = this.components;
				var c1 = js_Boot.getClass(component);
				var k = c1.__name__;
				var v = [];
				this2.h[k] = v;
			}
			var this3 = this.components;
			var c2 = js_Boot.getClass(component);
			var key1 = c2.__name__;
			this3.h[key1].push(component);
			this.map.h[id].push(component);
		}
		if(labels != null) {
			var _g = 0;
			while(_g < labels.length) {
				var label = labels[_g];
				++_g;
				if(this.labelMap.h[label] == null) {
					var v = [];
					this.labelMap.h[label] = v;
				}
				this.labelMap.h[label].push(id);
			}
			var this1 = this.entityLabels;
			var v = labels.slice();
			this1.h[id] = v;
		} else {
			var v = [];
			this.entityLabels.h[id] = v;
		}
	}
	,getEntities: function(componentClassNames,labels) {
		var _gthis = this;
		if(Lambda.exists(componentClassNames,function(componentClassName) {
			return _gthis.components.h[componentClassName] == null;
		})) {
			return [];
		}
		if(componentClassNames.length == 1) {
			var _this = this.components.h[componentClassNames[0]];
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = _this[i].entity;
			}
			var matchingEntities = result;
			if(labels != null) {
				var _g = [];
				var _g1 = 0;
				var _g2 = matchingEntities;
				while(_g1 < _g2.length) {
					var v = _g2[_g1];
					++_g1;
					if(Lambda.foreach(labels,(function(entityId) {
						return function(label) {
							return _gthis.entityLabels.h[entityId[0]].indexOf(label) != -1;
						};
					})([v]))) {
						_g.push(v);
					}
				}
				matchingEntities = _g;
			}
			return matchingEntities;
		}
		var result = new Array(componentClassNames.length);
		var _g = 0;
		var _g1 = componentClassNames.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _gthis.components.h[componentClassNames[i]];
		}
		var compArr = result;
		var matchingEntities = Lambda.fold(compArr,function(components,jointEntities) {
			var result = new Array(components.length);
			var _g = 0;
			var _g1 = components.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = components[i].entity;
			}
			var componentEntities = result;
			if(jointEntities == null) {
				return componentEntities;
			}
			var _g = [];
			var _g1 = 0;
			var _g2 = componentEntities;
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				if(jointEntities.indexOf(v) != -1) {
					_g.push(v);
				}
			}
			return _g;
		},null);
		if(labels != null) {
			var _g = [];
			var _g1 = 0;
			var _g2 = matchingEntities;
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				if(Lambda.foreach(labels,(function(entityId) {
					return function(label) {
						return _gthis.entityLabels.h[entityId[0]].indexOf(label) != -1;
					};
				})([v]))) {
					_g.push(v);
				}
			}
			matchingEntities = _g;
		}
		return matchingEntities;
	}
	,getEntityComponent: function(entityId,componentType) {
		return Lambda.find(this.map.h[entityId],function(component) {
			var c = js_Boot.getClass(component);
			return c.__name__ == componentType.__name__;
		});
	}
	,getEntityLabels: function(entityId,filterLabels) {
		if(filterLabels != null) {
			var _g = [];
			var _g1 = 0;
			var _g2 = this.entityLabels.h[entityId];
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				if(filterLabels.indexOf(v) != -1) {
					_g.push(v);
				}
			}
			return _g;
		}
		return this.entityLabels.h[entityId];
	}
	,removeEntity: function(entityId) {
		if(this.entities.indexOf(entityId) == -1) {
			return;
		}
		HxOverrides.remove(this.entities,entityId);
		var _g = haxe_ds_StringMap.kvIterator(this.labelMap.h);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var _ = _g1.key;
			var entityList = _g1.value;
			HxOverrides.remove(entityList,entityId);
		}
		this.entityLabels.remove(entityId);
		var _g = haxe_ds_StringMap.kvIterator(this.components.h);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var _ = _g1.key;
			var componentList = _g1.value;
			var _g2 = 0;
			while(_g2 < componentList.length) {
				var component = componentList[_g2];
				++_g2;
				if(this.map.h[entityId].indexOf(component) != -1) {
					HxOverrides.remove(componentList,component);
				}
			}
		}
		this.map.remove(entityId);
	}
	,addSystems: function(systems) {
		var _g = 0;
		while(_g < systems.length) {
			var system = systems[_g];
			++_g;
			this.addSystem(system);
		}
	}
	,addSystem: function(system) {
		this.systems.push(system);
	}
	,addRenderSystems: function(systems) {
		var _g = 0;
		while(_g < systems.length) {
			var system = systems[_g];
			++_g;
			this.addRenderSystem(system);
		}
	}
	,addRenderSystem: function(system) {
		this.renderSystems.push(system);
	}
	,getShapes: function(componentClassNames) {
		var _gthis = this;
		var entities = this.getEntities(componentClassNames);
		var result = new Array(entities.length);
		var _g = 0;
		var _g1 = entities.length;
		while(_g < _g1) {
			var i = _g++;
			var entityId = entities[i];
			var object = { id : entityId};
			var _g2 = 0;
			while(_g2 < componentClassNames.length) {
				var className = componentClassNames[_g2];
				++_g2;
				var componentClass = $hxClasses[className];
				var meta = haxe_rtti_Meta.getType($hxClasses[className]);
				object[meta != null && meta.shape != null && meta.shape.length > 0 ? meta.shape[0] : componentClass.__name__] = _gthis.getEntityComponent(entityId,componentClass);
			}
			result[i] = object;
		}
		return result;
	}
	,destroy: function() {
		this.entities = [];
		this.components = new haxe_ds_StringMap();
		this.systems = [];
		this.renderSystems = [];
	}
	,__class__: feint_forge_Forge
};
var feint_forge_System = function() { };
$hxClasses["feint.forge.System"] = feint_forge_System;
feint_forge_System.__name__ = "feint.forge.System";
feint_forge_System.prototype = {
	update: function(elapsed,forge) {
		throw new feint_debug_FeintException("ForgeSystemNotImplemented","Forge System not implemented, make sure to override `update` and not call `super.update()`.");
	}
	,__class__: feint_forge_System
};
var feint_forge_RenderSystem = function() { };
$hxClasses["feint.forge.RenderSystem"] = feint_forge_RenderSystem;
feint_forge_RenderSystem.__name__ = "feint.forge.RenderSystem";
feint_forge_RenderSystem.prototype = {
	render: function(renderer,forge) {
		throw new feint_debug_FeintException("ForgeRenderNotImplemented","Forge RenderSystem not implemented, make sure to override `render` and not call `super.render()`.");
	}
	,__class__: feint_forge_RenderSystem
};
var feint_graphics_BitmapFont = function(fontAssetId,textureAssetId) {
	this.characters = new haxe_ds_StringMap();
	this.fontAssetId = fontAssetId;
	this.textureAssetId = textureAssetId;
	if(fontAssetId != null) {
		this.load();
		this.parse();
	}
};
$hxClasses["feint.graphics.BitmapFont"] = feint_graphics_BitmapFont;
feint_graphics_BitmapFont.__name__ = "feint.graphics.BitmapFont";
feint_graphics_BitmapFont.prototype = {
	load: function() {
		this.fontFileContent = window.document.getElementById(this.fontAssetId).textContent;
	}
	,parse: function() {
		var lines = this.fontFileContent.split("\n");
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			if(HxOverrides.substr(line,0,4) == "info") {
				this.parseInfo(HxOverrides.substr(line,5,null));
			} else if(HxOverrides.substr(line,0,6) == "common") {
				this.parseCommon(HxOverrides.substr(line,7,null));
			} else if(HxOverrides.substr(line,0,4) != "page") {
				if(HxOverrides.substr(line,0,5) != "chars") {
					if(HxOverrides.substr(line,0,4) == "char") {
						this.parseChar(HxOverrides.substr(line,5,null));
					} else {
						var tmp = HxOverrides.substr(line,0,8) == "kernings";
					}
				}
			}
		}
	}
	,parseInfo: function(line) {
		var index = 0;
		while(index < line.length) {
			var eqPos = line.indexOf("=",index);
			var property = StringTools.replace(line.substring(index,eqPos)," ","");
			var value;
			if(line.charAt(eqPos + 1) == "\"") {
				var openQuotePos = eqPos + 1;
				var endQuotePos = line.indexOf("\"",eqPos + 2);
				value = line.substring(openQuotePos + 1,endQuotePos);
				index = endQuotePos + 1;
			} else {
				var spacePos = line.indexOf(" ",eqPos);
				if(spacePos != -1) {
					value = line.substring(eqPos + 1,spacePos);
				} else {
					value = line.substring(eqPos + 1);
				}
				index = spacePos + 1;
			}
			switch(property) {
			case "face":
				this.name = value;
				break;
			case "padding":
				var pads = value.split(",");
				this.padding = { up : Std.parseInt(pads[0]), down : Std.parseInt(pads[1]), left : Std.parseInt(pads[2]), right : Std.parseInt(pads[3])};
				break;
			case "size":
				this.size = Std.parseInt(value);
				break;
			case "spacing":
				var spaces = value.split(",");
				this.spacing = { horizontal : Std.parseInt(spaces[0]), vertical : Std.parseInt(spaces[1])};
				break;
			}
			if(index == 0) {
				break;
			}
		}
	}
	,parseCommon: function(line) {
		var index = 0;
		while(index < line.length) {
			var eqPos = line.indexOf("=",index);
			var property = StringTools.replace(line.substring(index,eqPos)," ","");
			var value;
			if(line.charAt(eqPos + 1) == "\"") {
				var openQuotePos = eqPos + 1;
				var endQuotePos = line.indexOf("\"",eqPos + 2);
				value = line.substring(openQuotePos + 1,endQuotePos);
				index = endQuotePos + 1;
			} else {
				var spacePos = line.indexOf(" ",eqPos);
				if(spacePos != -1) {
					value = line.substring(eqPos + 1,spacePos);
				} else {
					value = line.substring(eqPos + 1);
				}
				index = spacePos + 1;
			}
			switch(property) {
			case "base":
				this.baseline = Std.parseInt(value);
				break;
			case "lineHeight":
				this.lineHeight = Std.parseInt(value);
				break;
			case "scaleH":
				this.textureHeight = Std.parseInt(value);
				break;
			case "scaleW":
				this.textureWidth = Std.parseInt(value);
				break;
			}
			if(index == 0) {
				break;
			}
		}
	}
	,parseChar: function(line) {
		var index = 0;
		var character = { x : 0, y : 0, width : 0, height : 0, xOffset : 0, yOffset : 0, xAdvance : 0};
		var charId = "";
		while(index < line.length) {
			var eqPos = line.indexOf("=",index);
			var property = StringTools.replace(line.substring(index,eqPos)," ","");
			var value;
			if(line.charAt(eqPos + 1) == "\"") {
				var openQuotePos = eqPos + 1;
				var endQuotePos = line.indexOf("\"",eqPos + 2);
				value = line.substring(openQuotePos + 1,endQuotePos);
				index = endQuotePos + 1;
			} else {
				var spacePos = line.indexOf(" ",eqPos);
				if(spacePos != -1) {
					value = line.substring(eqPos + 1,spacePos);
				} else {
					value = line.substring(eqPos + 1);
				}
				index = spacePos + 1;
			}
			switch(property) {
			case "height":
				character.height = Std.parseInt(value);
				break;
			case "id":
				var code = Std.parseInt(value);
				charId = String.fromCodePoint(code);
				break;
			case "width":
				character.width = Std.parseInt(value);
				break;
			case "x":
				character.x = Std.parseInt(value);
				break;
			case "xadvance":
				character.xAdvance = Std.parseInt(value);
				break;
			case "xoffset":
				character.xOffset = Std.parseInt(value);
				break;
			case "y":
				character.y = Std.parseInt(value);
				break;
			case "yoffset":
				character.yOffset = Std.parseInt(value);
				break;
			}
			if(index == 0) {
				break;
			}
		}
		this.characters.h[charId] = character;
	}
	,__class__: feint_graphics_BitmapFont
};
var feint_graphics_BitmapText = function(text,font) {
	this.text = text;
	if(font != null) {
		this.font = font;
	} else {
		this.font = feint_graphics_DefaultBitmapFont.getFont();
	}
};
$hxClasses["feint.graphics.BitmapText"] = feint_graphics_BitmapText;
feint_graphics_BitmapText.__name__ = "feint.graphics.BitmapText";
feint_graphics_BitmapText.prototype = {
	draw: function(renderer,x,y,fontSize) {
		var xChar = 0;
		var yChar = 0;
		var scale = fontSize / this.font.lineHeight;
		var _g = 0;
		var _g1 = this.text.length;
		while(_g < _g1) {
			var charIndex = _g++;
			var char = this.text.charAt(charIndex);
			if(char == "\n") {
				xChar = 0;
				yChar += Math.floor(this.font.lineHeight * scale);
				continue;
			}
			if(char == "") {
				continue;
			}
			renderer.drawImage(Math.floor(x + xChar + this.font.characters.h[char].xOffset * scale),Math.floor(y + yChar + this.font.characters.h[char].yOffset * scale),this.font.textureAssetId,this.font.textureWidth,this.font.textureHeight,0,scale,scale,-1,1,0.0,{ x : this.font.characters.h[char].x, y : this.font.characters.h[char].y, width : this.font.characters.h[char].width, height : this.font.characters.h[char].height});
			xChar += Math.floor(this.font.characters.h[char].xAdvance * scale);
		}
	}
	,__class__: feint_graphics_BitmapText
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw haxe_Exception.thrown("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw haxe_Exception.thrown("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw haxe_Exception.thrown("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			return cl;
		case 66:
			var name = this.unserialize();
			var e = this.resolver.resolveEnum(name);
			if(e == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			return e;
		case 67:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw haxe_Exception.thrown("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw haxe_Exception.thrown("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				var value = this.unserialize();
				h.h[s] = value;
			}
			this.pos++;
			return h;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw haxe_Exception.thrown("Unknown enum index " + name + "@" + index);
			}
			var e = this.unserializeEnum(edecl,tag);
			this.cache.push(e);
			return e;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 112:
			return Infinity;
		case 113:
			var h = new haxe_ds_IntMap();
			this.cache.push(h);
			var buf = this.buf;
			var c = this.buf.charCodeAt(this.pos++);
			while(c == 58) {
				var i = this.readDigits();
				var value = this.unserialize();
				h.h[i] = value;
				c = this.buf.charCodeAt(this.pos++);
			}
			if(c != 104) {
				throw haxe_Exception.thrown("Invalid IntMap format");
			}
			return h;
		case 114:
			var n = this.readDigits();
			if(n < 0 || n >= this.cache.length) {
				throw haxe_Exception.thrown("Invalid reference");
			}
			return this.cache[n];
		case 115:
			var len = this.readDigits();
			var buf = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i < max) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				var c3 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				var c4 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				if(rest == 3) {
					var c3 = codes[buf.charCodeAt(i++)];
					bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 120:
			throw haxe_Exception.thrown(this.unserialize());
		case 121:
			var len = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid string length");
			}
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw haxe_Exception.thrown("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var feint_graphics_DefaultBitmapFont = function(fntContent,textureAssetId) {
	feint_graphics_BitmapFont.call(this,null,textureAssetId);
	this.fontFileContent = fntContent;
	this.parse();
};
$hxClasses["feint.graphics.DefaultBitmapFont"] = feint_graphics_DefaultBitmapFont;
feint_graphics_DefaultBitmapFont.__name__ = "feint.graphics.DefaultBitmapFont";
feint_graphics_DefaultBitmapFont.getFont = function() {
	var embeddedAssetId = "embedded:GenericMobileSystemNuevo__png";
	feint_assets_macros_AssetEmbed.embeddedAssets.h[embeddedAssetId] = feint_graphics_DefaultBitmapFont.gmsNuevoPng;
	if(feint_graphics_DefaultBitmapFont.font == null) {
		feint_graphics_DefaultBitmapFont.font = new feint_graphics_DefaultBitmapFont(feint_graphics_DefaultBitmapFont.gmsNuevoFnt,embeddedAssetId);
	}
	return feint_graphics_DefaultBitmapFont.font;
};
feint_graphics_DefaultBitmapFont.__super__ = feint_graphics_BitmapFont;
feint_graphics_DefaultBitmapFont.prototype = $extend(feint_graphics_BitmapFont.prototype,{
	__class__: feint_graphics_DefaultBitmapFont
});
var feint_input_InputManager = function(renderContext) {
	this.keyboard = new feint_input_device_Keyboard(renderContext);
};
$hxClasses["feint.input.InputManager"] = feint_input_InputManager;
feint_input_InputManager.__name__ = "feint.input.InputManager";
feint_input_InputManager.prototype = {
	update: function(elapsed) {
		this.keyboard.flushQueue();
	}
	,__class__: feint_input_InputManager
};
var feint_input_device_KeyEvent = $hxEnums["feint.input.device.KeyEvent"] = { __ename__ : true, __constructs__ : ["KeyUp","KeyDown"]
	,KeyUp: ($_=function(key) { return {_hx_index:0,key:key,__enum__:"feint.input.device.KeyEvent",toString:$estr}; },$_.__params__ = ["key"],$_)
	,KeyDown: ($_=function(key) { return {_hx_index:1,key:key,__enum__:"feint.input.device.KeyEvent",toString:$estr}; },$_.__params__ = ["key"],$_)
};
var feint_input_device_KeyState = $hxEnums["feint.input.device.KeyState"] = { __ename__ : true, __constructs__ : ["Released","JustReleased","Pressed","JustPressed"]
	,Released: {_hx_index:0,__enum__:"feint.input.device.KeyState",toString:$estr}
	,JustReleased: {_hx_index:1,__enum__:"feint.input.device.KeyState",toString:$estr}
	,Pressed: {_hx_index:2,__enum__:"feint.input.device.KeyState",toString:$estr}
	,JustPressed: {_hx_index:3,__enum__:"feint.input.device.KeyState",toString:$estr}
};
var feint_input_device_Keyboard = function(renderContext) {
	this.keys = new haxe_ds_IntMap();
	var _g = 0;
	var _g1 = feint_input_device_Keyboard.supportedKeyCodes;
	while(_g < _g1.length) {
		var keyCode = _g1[_g];
		++_g;
		var v = feint_input_device_KeyState.Released;
		this.keys.set(keyCode,v);
	}
	this.eventQueue = [];
	window.addEventListener("keydown",$bind(this,this.onKeyDown));
	window.addEventListener("keyup",$bind(this,this.onKeyUp));
};
$hxClasses["feint.input.device.Keyboard"] = feint_input_device_Keyboard;
feint_input_device_Keyboard.__name__ = "feint.input.device.Keyboard";
feint_input_device_Keyboard.prototype = {
	flushQueue: function() {
		var _g = this.keys.keyValueIterator();
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var keyCode = _g1.key;
			var keyEvent = _g1.value;
			var this1 = this.keys;
			var v;
			switch(keyEvent._hx_index) {
			case 0:
				v = feint_input_device_KeyState.Released;
				break;
			case 1:
				v = feint_input_device_KeyState.Released;
				break;
			case 2:
				v = feint_input_device_KeyState.Pressed;
				break;
			case 3:
				v = feint_input_device_KeyState.Pressed;
				break;
			}
			this1.set(keyCode,v);
		}
		var events = this.eventQueue;
		this.eventQueue = [];
		var _g = 0;
		while(_g < events.length) {
			var event = events[_g];
			++_g;
			switch(event._hx_index) {
			case 0:
				var keyCode = event.key;
				if(this.keys.get(keyCode) == feint_input_device_KeyState.Pressed) {
					var v = feint_input_device_KeyState.JustReleased;
					this.keys.set(keyCode,v);
				}
				break;
			case 1:
				var keyCode1 = event.key;
				if(this.keys.get(keyCode1) == feint_input_device_KeyState.Released) {
					var v1 = feint_input_device_KeyState.JustPressed;
					this.keys.set(keyCode1,v1);
				}
				break;
			}
		}
	}
	,onKeyDown: function(event) {
		if(feint_input_device_Keyboard.supportedKeyCodes.indexOf(event.keyCode) != -1) {
			this.eventQueue.push(feint_input_device_KeyEvent.KeyDown(event.keyCode));
		}
	}
	,onKeyUp: function(event) {
		if(feint_input_device_Keyboard.supportedKeyCodes.indexOf(event.keyCode) != -1) {
			this.eventQueue.push(feint_input_device_KeyEvent.KeyUp(event.keyCode));
		}
	}
	,__class__: feint_input_device_Keyboard
};
var feint_library_BitmapTextComponent = function(string,fontSize) {
	this.text = new feint_graphics_BitmapText(string);
	this.fontSize = fontSize;
};
$hxClasses["feint.library.BitmapTextComponent"] = feint_library_BitmapTextComponent;
feint_library_BitmapTextComponent.__name__ = "feint.library.BitmapTextComponent";
feint_library_BitmapTextComponent.__super__ = feint_forge_Component;
feint_library_BitmapTextComponent.prototype = $extend(feint_forge_Component.prototype,{
	__class__: feint_library_BitmapTextComponent
});
var feint_library_BitmapTextRenderSystem = function() {
};
$hxClasses["feint.library.BitmapTextRenderSystem"] = feint_library_BitmapTextRenderSystem;
feint_library_BitmapTextRenderSystem.__name__ = "feint.library.BitmapTextRenderSystem";
feint_library_BitmapTextRenderSystem.__super__ = feint_forge_RenderSystem;
feint_library_BitmapTextRenderSystem.prototype = $extend(feint_forge_RenderSystem.prototype,{
	render: function(renderer,forge) {
		var texts = forge.getShapes([feint_library_BitmapTextComponent.__name__,feint_library_PositionComponent.__name__]);
		var _g = 0;
		while(_g < texts.length) {
			var text = texts[_g];
			++_g;
			text.bitmapText.text.draw(renderer,Math.floor(text.position.x),Math.floor(text.position.y),text.bitmapText.fontSize);
		}
	}
	,__class__: feint_library_BitmapTextRenderSystem
});
var feint_library_PositionComponent = function(x,y) {
	this.x = x;
	this.y = y;
};
$hxClasses["feint.library.PositionComponent"] = feint_library_PositionComponent;
feint_library_PositionComponent.__name__ = "feint.library.PositionComponent";
feint_library_PositionComponent.__super__ = feint_forge_Component;
feint_library_PositionComponent.prototype = $extend(feint_forge_Component.prototype,{
	__class__: feint_library_PositionComponent
});
var feint_macros_EnumTools = function() { };
$hxClasses["feint.macros.EnumTools"] = feint_macros_EnumTools;
feint_macros_EnumTools.__name__ = "feint.macros.EnumTools";
var feint_renderer_Camera = function() {
	this.scale = 1;
	this.rotation = 0;
	this.translation = { x : 0, y : 0};
	this.calculate();
};
$hxClasses["feint.renderer.Camera"] = feint_renderer_Camera;
feint_renderer_Camera.__name__ = "feint.renderer.Camera";
feint_renderer_Camera.prototype = {
	set_translation: function(translation) {
		this.translation = translation;
		this.calculate();
		return translation;
	}
	,set_rotation: function(rotation) {
		this.rotation = rotation;
		this.calculate();
		return rotation;
	}
	,set_scale: function(scale) {
		this.scale = scale;
		this.calculate();
		return scale;
	}
	,calculate: function() {
		var translationMatrix = feint_utils_Matrix.translation(this.translation.x,this.translation.y);
		var rotationMatrix = feint_utils_Matrix.rotation(this.rotation);
		var scaleMatrix = feint_utils_Matrix.scaling(this.scale,this.scale);
		this.projection = feint_utils_Matrix.multiply(translationMatrix,rotationMatrix);
		this.projection = feint_utils_Matrix.multiply(this.projection,scaleMatrix);
	}
	,__class__: feint_renderer_Camera
};
var feint_renderer_RenderAPI = $hxEnums["feint.renderer.RenderAPI"] = { __ename__ : true, __constructs__ : ["Canvas","WebGL","WebGL2"]
	,Canvas: {_hx_index:0,__enum__:"feint.renderer.RenderAPI",toString:$estr}
	,WebGL: {_hx_index:1,__enum__:"feint.renderer.RenderAPI",toString:$estr}
	,WebGL2: {_hx_index:2,__enum__:"feint.renderer.RenderAPI",toString:$estr}
};
var feint_renderer_RenderContext = function() { };
$hxClasses["feint.renderer.RenderContext"] = feint_renderer_RenderContext;
feint_renderer_RenderContext.__name__ = "feint.renderer.RenderContext";
feint_renderer_RenderContext.__isInterface__ = true;
feint_renderer_RenderContext.prototype = {
	__class__: feint_renderer_RenderContext
};
var feint_renderer_Renderer = function(renderContext) {
	this.renderContext = renderContext;
};
$hxClasses["feint.renderer.Renderer"] = feint_renderer_Renderer;
feint_renderer_Renderer.__name__ = "feint.renderer.Renderer";
feint_renderer_Renderer.prototype = {
	clear: function() {
		this.renderContext.clear();
	}
	,drawRect: function(x,y,width,height,rotation,color,alpha,depth) {
		if(depth == null) {
			depth = 1.0;
		}
		if(alpha == null) {
			alpha = 1.0;
		}
		if(color == null) {
			color = -1;
		}
		if(rotation == null) {
			rotation = 0.0;
		}
		this.renderContext.drawRect(x,y,width,height,rotation,color,alpha,depth);
	}
	,drawText: function(x,y,text,fontSize,font,align) {
		if(align == null) {
			align = "left";
		}
		this.renderContext.drawText(x,y,text,fontSize,font,align);
	}
	,drawImage: function(x,y,assetId,textureWidth,textureHeight,rotation,xScale,yScale,color,alpha,depth,clip) {
		if(depth == null) {
			depth = 1.0;
		}
		if(alpha == null) {
			alpha = 1.0;
		}
		if(color == null) {
			color = -1;
		}
		if(yScale == null) {
			yScale = 1;
		}
		if(xScale == null) {
			xScale = 1;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.renderContext.drawImage(x,y,assetId,textureWidth,textureHeight,rotation,xScale,yScale,color,alpha,depth,clip);
	}
	,submit: function() {
		this.renderContext.submit();
	}
	,get_camera: function() {
		return this.renderContext.camera;
	}
	,set_camera: function(camera) {
		this.renderContext.camera = camera;
		return this.renderContext.camera;
	}
	,__class__: feint_renderer_Renderer
};
var feint_renderer_backends_WebGLShader = function() { };
$hxClasses["feint.renderer.backends.WebGLShader"] = feint_renderer_backends_WebGLShader;
feint_renderer_backends_WebGLShader.__name__ = "feint.renderer.backends.WebGLShader";
feint_renderer_backends_WebGLShader.compileShader = function(context,type,source) {
	var shader = context.createShader(type);
	context.shaderSource(shader,source);
	context.compileShader(shader);
	var success = context.getShaderParameter(shader,35713);
	if(!success) {
		feint_debug_Logger.error("WebGL shader compilation " + context.getShaderInfoLog(shader));
		context.deleteShader(shader);
		return null;
	}
	return shader;
};
feint_renderer_backends_WebGLShader.createProgram = function(context,vertexShader,fragmentShader) {
	var program = context.createProgram();
	context.attachShader(program,vertexShader);
	context.attachShader(program,fragmentShader);
	context.linkProgram(program);
	var success = context.getProgramParameter(program,35714);
	if(!success) {
		feint_debug_Logger.error("WebGL program creation " + context.getProgramInfoLog(program));
		context.deleteProgram(program);
		return null;
	}
	return program;
};
feint_renderer_backends_WebGLShader.prototype = {
	load: function() {
	}
	,compile: function(context) {
		var vertexShader = feint_renderer_backends_WebGLShader.compileShader(context,35633,this.vertexShaderSource);
		var fragmentShader = feint_renderer_backends_WebGLShader.compileShader(context,35632,this.fragmentShaderSource);
		this.program = feint_renderer_backends_WebGLShader.createProgram(context,vertexShader,fragmentShader);
	}
	,use: function(context) {
		context.useProgram(this.program);
	}
	,globals: function(context) {
	}
	,draw: function(context) {
	}
	,__class__: feint_renderer_backends_WebGLShader
};
var feint_renderer_backends_BatchRenderWebGLShader = function() {
	this.rects = [];
	this.textureObjects = [];
};
$hxClasses["feint.renderer.backends.BatchRenderWebGLShader"] = feint_renderer_backends_BatchRenderWebGLShader;
feint_renderer_backends_BatchRenderWebGLShader.__name__ = "feint.renderer.backends.BatchRenderWebGLShader";
feint_renderer_backends_BatchRenderWebGLShader.__super__ = feint_renderer_backends_WebGLShader;
feint_renderer_backends_BatchRenderWebGLShader.prototype = $extend(feint_renderer_backends_WebGLShader.prototype,{
	load: function() {
		this.vertexShaderSource = "\n      attribute vec2 a_position;\n      attribute vec4 a_color;\n      attribute float a_textureIndex;\n      attribute vec2 a_textureCoordinate;\n      attribute vec2 a_translation;\n      attribute vec2 a_rotation;\n      attribute float a_alpha;\n      attribute float a_depth;\n\n      uniform vec2 u_resolution;\n      uniform mat3 u_projection;\n\n      varying vec4 v_color;\n      varying float v_textureIndex;\n      varying vec2 v_textureCoordinate;\n      varying float v_alpha;\n      \n      void main() {\n        vec2 rotatedPosition = vec2(\n          a_position.x * a_rotation.y + a_position.y * a_rotation.x,\n          a_position.y * a_rotation.y - a_position.x * a_rotation.x);\n        \n        vec2 translatedPosition = rotatedPosition + a_translation;\n\n        vec2 position = (u_projection * vec3(translatedPosition, 1)).xy;\n\n        // convert the position from pixels to 0.0 to 1.0\n        vec2 zeroToOne = position / u_resolution;\n    \n        // convert from 0->1 to 0->2\n        vec2 zeroToTwo = zeroToOne * 2.0;\n    \n        // convert from 0->2 to -1->+1 (clip space)\n        vec2 clipSpace = zeroToTwo - 1.0;\n\n        gl_Position = vec4(clipSpace * vec2(1, -1), a_depth, 1);\n        v_color = a_color;\n        v_textureIndex = a_textureIndex;\n        v_textureCoordinate = a_textureCoordinate;\n        v_alpha = a_alpha;\n      }\n    ";
		this.fragmentShaderSource = "\n      #define maxTextures 8\n\n      precision mediump float;\n\n      uniform sampler2D u_textures[maxTextures];\n\n      varying vec4 v_color;\n      varying vec2 v_textureCoordinate;\n      varying float v_textureIndex;\n      varying float v_alpha;\n\n      vec4 getTextureColorAtIndex(sampler2D textures[maxTextures], int index) {\n        vec4 color = vec4(1, 1, 1, 1);\n        for (int i = 0; i < maxTextures; ++i) {\n          if (i == index) {\n            color = texture2D(textures[i], v_textureCoordinate);\n          }\n        }\n        return color;\n      }\n\n      void main() {\n        vec4 texColor = getTextureColorAtIndex(u_textures, int(v_textureIndex));\n        gl_FragColor = v_color * texColor * vec4(1, 1, 1, v_alpha);\n      }\n    ";
	}
	,compile: function(context) {
		feint_renderer_backends_WebGLShader.prototype.compile.call(this,context);
		this.position = context.getAttribLocation(this.program,"a_position");
		this.color = context.getAttribLocation(this.program,"a_color");
		this.textureIndex = context.getAttribLocation(this.program,"a_textureIndex");
		this.textureCoordinate = context.getAttribLocation(this.program,"a_textureCoordinate");
		this.translation = context.getAttribLocation(this.program,"a_translation");
		this.rotation = context.getAttribLocation(this.program,"a_rotation");
		this.alpha = context.getAttribLocation(this.program,"a_alpha");
		this.depth = context.getAttribLocation(this.program,"a_depth");
		this.resolution = context.getUniformLocation(this.program,"u_resolution");
		this.textures = context.getUniformLocation(this.program,"u_textures");
		this.projection = context.getUniformLocation(this.program,"u_projection");
		this.buffer = context.createBuffer();
		this.bindIdentityTexture(context);
	}
	,globals: function(context) {
	}
	,draw: function(context) {
		if(this.rects.length == 0) {
			feint_debug_Logger.warn("Attempting to draw without no vertices, you're likely submitting a render call without queuing any quads to the batch.");
			return;
		}
		var translationMatrix = feint_utils_Matrix.translation(0,0);
		var rotationMatrix = feint_utils_Matrix.rotation(0);
		var scaleMatrix = feint_utils_Matrix.scaling(1,1);
		var temp_translation = feint_utils_Matrix.multiply(translationMatrix,rotationMatrix);
		temp_translation = feint_utils_Matrix.multiply(temp_translation,scaleMatrix);
		context.uniform2f(this.resolution,context.canvas.width,context.canvas.height);
		context.uniform1iv(this.textures,[0,1,2,3,4,5,6,7]);
		context.uniformMatrix3fv(this.projection,false,this.cameraProjection);
		context.bindBuffer(34962,this.buffer);
		var stride = 60;
		var offset = 0;
		context.enableVertexAttribArray(this.position);
		context.vertexAttribPointer(this.position,2,5126,false,stride,offset);
		offset += 8;
		context.enableVertexAttribArray(this.color);
		context.vertexAttribPointer(this.color,4,5126,false,stride,offset);
		offset += 16;
		context.enableVertexAttribArray(this.textureIndex);
		context.vertexAttribPointer(this.textureIndex,1,5126,false,stride,offset);
		offset += 4;
		context.enableVertexAttribArray(this.textureCoordinate);
		context.vertexAttribPointer(this.textureCoordinate,2,5126,false,stride,offset);
		offset += 8;
		context.enableVertexAttribArray(this.translation);
		context.vertexAttribPointer(this.translation,2,5126,false,stride,offset);
		offset += 8;
		context.enableVertexAttribArray(this.rotation);
		context.vertexAttribPointer(this.rotation,2,5126,false,stride,offset);
		offset += 8;
		context.enableVertexAttribArray(this.alpha);
		context.vertexAttribPointer(this.alpha,1,5126,false,stride,offset);
		offset += 4;
		context.enableVertexAttribArray(this.depth);
		context.vertexAttribPointer(this.depth,1,5126,false,stride,offset);
		offset += 4;
		var bufferData = this.rectsToBufferData(this.rects);
		context.bufferData(34962,bufferData,35044);
		var primitiveType = 4;
		var offset = 0;
		var count = 6 * this.rects.length;
		if(count > 65000) {
			feint_debug_Logger.warn("Nearing WebGL limit of vertices! " + count + "/65535");
		} else if(count == 0) {
			feint_debug_Logger.error("Attempting to draw without no vertices, you're likely submitting a render call without queuing any quads to the batch.");
			return;
		}
		context.drawArrays(primitiveType,offset,count);
	}
	,addClipRect: function(x,y,width,height,clipX1,clipX2,clipY1,clipY2,color,rotation,alpha,depth,textureId) {
		if(textureId == null) {
			textureId = 0;
		}
		if(depth == null) {
			depth = 0.0;
		}
		if(alpha == null) {
			alpha = 1.0;
		}
		if(rotation == null) {
			rotation = 0.0;
		}
		var tmp = Math.sin(2 * Math.PI - rotation);
		var tmp1 = Math.cos(2 * Math.PI - rotation);
		this.rects.push({ positions : [0,0,width,0,0,height,0,height,width,0,width,height], color : feint_utils_Math.colorToVec4(color), textureIndex : textureId, textureCoordinates : [clipX1,clipY1,clipX2,clipY1,clipX1,clipY2,clipX1,clipY2,clipX2,clipY1,clipX2,clipY2], translation : [x,y], rotation : [tmp,tmp1], alpha : alpha, depth : depth});
	}
	,addRect: function(x,y,width,height,color,rotation,alpha,depth,textureId) {
		if(textureId == null) {
			textureId = 0;
		}
		if(depth == null) {
			depth = 0.0;
		}
		if(alpha == null) {
			alpha = 1.0;
		}
		if(rotation == null) {
			rotation = 0.0;
		}
		var xOrigin = width / 2;
		var yOrigin = height / 2;
		var xRotation = Math.sin(2 * Math.PI - rotation);
		var yRotation = Math.cos(2 * Math.PI - rotation);
		this.rects.push({ positions : [0,0,width,0,0,height,0,height,width,0,width,height], color : feint_utils_Math.colorToVec4(color), textureIndex : textureId, textureCoordinates : [0,0,1,0,0,1,0,1,1,0,1,1], translation : [x + xOrigin - (xOrigin * yRotation + yOrigin * xRotation),y + yOrigin - (yOrigin * yRotation - xOrigin * xRotation)], rotation : [xRotation,yRotation], alpha : alpha, depth : depth});
	}
	,bindIdentityTexture: function(context) {
		var texture = context.createTexture();
		context.activeTexture(33984);
		context.bindTexture(3553,texture);
		context.texImage2D(3553,0,6408,1,1,0,6408,5121,new Uint8Array([255,255,255,255]));
		this.textureObjects.push(texture);
		context.activeTexture(33985);
		context.bindTexture(3553,texture);
		context.texImage2D(3553,0,6408,1,1,0,6408,5121,new Uint8Array([255,255,255,255]));
		context.activeTexture(33986);
		context.bindTexture(3553,texture);
		context.texImage2D(3553,0,6408,1,1,0,6408,5121,new Uint8Array([255,255,255,255]));
		context.activeTexture(33987);
		context.bindTexture(3553,texture);
		context.texImage2D(3553,0,6408,1,1,0,6408,5121,new Uint8Array([255,255,255,255]));
		context.activeTexture(33988);
		context.bindTexture(3553,texture);
		context.texImage2D(3553,0,6408,1,1,0,6408,5121,new Uint8Array([255,255,255,255]));
		context.activeTexture(33989);
		context.bindTexture(3553,texture);
		context.texImage2D(3553,0,6408,1,1,0,6408,5121,new Uint8Array([255,255,255,255]));
		context.activeTexture(33990);
		context.bindTexture(3553,texture);
		context.texImage2D(3553,0,6408,1,1,0,6408,5121,new Uint8Array([255,255,255,255]));
		context.activeTexture(33991);
		context.bindTexture(3553,texture);
		context.texImage2D(3553,0,6408,1,1,0,6408,5121,new Uint8Array([255,255,255,255]));
	}
	,prepTexture: function(context) {
		if(this.textureObjects.length >= 8) {
			throw new feint_debug_FeintException("WEBGL_TEXTURE_LIMIT_REACHED","Feint WebGL currently only supports a max of 7 textures! Please combine texture assets if possible and submit up to 7.");
		}
		var index = this.textureObjects.length;
		var texture = context.createTexture();
		context.activeTexture(33984 + index);
		context.bindTexture(3553,texture);
		context.texImage2D(3553,0,6408,1,1,0,6408,5121,new Uint8Array([0,255,255,255]));
		this.textureObjects.push(texture);
		return index;
	}
	,bindTexture: function(context,image) {
		if(this.textureObjects.length >= 8) {
			throw new feint_debug_FeintException("WEBGL_TEXTURE_LIMIT_REACHED","Feint WebGL currently only supports a max of 7 textures! Please combine texture assets if possible and submit up to 7.");
		}
		var index = this.textureObjects.length;
		context.activeTexture(33984 + index);
		var texture = context.createTexture();
		context.bindTexture(3553,texture);
		context.texImage2D(3553,0,6408,6408,5121,image);
		var useMipMap = image.width != null && image.height != null && feint_utils_Math.isPowerOf2(image.width) && feint_utils_Math.isPowerOf2(image.height);
		if(useMipMap) {
			context.generateMipmap(3553);
			context.texParameteri(3553,10241,9728);
			context.texParameterf(3553,10240,9728);
		} else {
			context.texParameteri(3553,10242,33071);
			context.texParameteri(3553,10243,33071);
			context.texParameteri(3553,10241,9728);
			context.texParameterf(3553,10240,9728);
		}
		this.textureObjects.push(texture);
		return index;
	}
	,rectsToBufferData: function(rects) {
		var verticesPerRect = 6;
		var floatsPerVertex = 15;
		var bufferSize = rects.length * verticesPerRect * floatsPerVertex;
		var bufferData = new Float32Array(bufferSize);
		var bi = 0;
		var _g = 0;
		var _g1 = rects.length;
		while(_g < _g1) {
			var i = _g++;
			bufferData[bi++] = rects[i].positions[0];
			bufferData[bi++] = rects[i].positions[1];
			bufferData[bi++] = rects[i].color[0];
			bufferData[bi++] = rects[i].color[1];
			bufferData[bi++] = rects[i].color[2];
			bufferData[bi++] = rects[i].color[3];
			bufferData[bi++] = rects[i].textureIndex;
			bufferData[bi++] = rects[i].textureCoordinates[0];
			bufferData[bi++] = rects[i].textureCoordinates[1];
			bufferData[bi++] = rects[i].translation[0];
			bufferData[bi++] = rects[i].translation[1];
			bufferData[bi++] = rects[i].rotation[0];
			bufferData[bi++] = rects[i].rotation[1];
			bufferData[bi++] = rects[i].alpha;
			bufferData[bi++] = rects[i].depth;
			bufferData[bi++] = rects[i].positions[2];
			bufferData[bi++] = rects[i].positions[3];
			bufferData[bi++] = rects[i].color[0];
			bufferData[bi++] = rects[i].color[1];
			bufferData[bi++] = rects[i].color[2];
			bufferData[bi++] = rects[i].color[3];
			bufferData[bi++] = rects[i].textureIndex;
			bufferData[bi++] = rects[i].textureCoordinates[2];
			bufferData[bi++] = rects[i].textureCoordinates[3];
			bufferData[bi++] = rects[i].translation[0];
			bufferData[bi++] = rects[i].translation[1];
			bufferData[bi++] = rects[i].rotation[0];
			bufferData[bi++] = rects[i].rotation[1];
			bufferData[bi++] = rects[i].alpha;
			bufferData[bi++] = rects[i].depth;
			bufferData[bi++] = rects[i].positions[4];
			bufferData[bi++] = rects[i].positions[5];
			bufferData[bi++] = rects[i].color[0];
			bufferData[bi++] = rects[i].color[1];
			bufferData[bi++] = rects[i].color[2];
			bufferData[bi++] = rects[i].color[3];
			bufferData[bi++] = rects[i].textureIndex;
			bufferData[bi++] = rects[i].textureCoordinates[4];
			bufferData[bi++] = rects[i].textureCoordinates[5];
			bufferData[bi++] = rects[i].translation[0];
			bufferData[bi++] = rects[i].translation[1];
			bufferData[bi++] = rects[i].rotation[0];
			bufferData[bi++] = rects[i].rotation[1];
			bufferData[bi++] = rects[i].alpha;
			bufferData[bi++] = rects[i].depth;
			bufferData[bi++] = rects[i].positions[6];
			bufferData[bi++] = rects[i].positions[7];
			bufferData[bi++] = rects[i].color[0];
			bufferData[bi++] = rects[i].color[1];
			bufferData[bi++] = rects[i].color[2];
			bufferData[bi++] = rects[i].color[3];
			bufferData[bi++] = rects[i].textureIndex;
			bufferData[bi++] = rects[i].textureCoordinates[6];
			bufferData[bi++] = rects[i].textureCoordinates[7];
			bufferData[bi++] = rects[i].translation[0];
			bufferData[bi++] = rects[i].translation[1];
			bufferData[bi++] = rects[i].rotation[0];
			bufferData[bi++] = rects[i].rotation[1];
			bufferData[bi++] = rects[i].alpha;
			bufferData[bi++] = rects[i].depth;
			bufferData[bi++] = rects[i].positions[8];
			bufferData[bi++] = rects[i].positions[9];
			bufferData[bi++] = rects[i].color[0];
			bufferData[bi++] = rects[i].color[1];
			bufferData[bi++] = rects[i].color[2];
			bufferData[bi++] = rects[i].color[3];
			bufferData[bi++] = rects[i].textureIndex;
			bufferData[bi++] = rects[i].textureCoordinates[8];
			bufferData[bi++] = rects[i].textureCoordinates[9];
			bufferData[bi++] = rects[i].translation[0];
			bufferData[bi++] = rects[i].translation[1];
			bufferData[bi++] = rects[i].rotation[0];
			bufferData[bi++] = rects[i].rotation[1];
			bufferData[bi++] = rects[i].alpha;
			bufferData[bi++] = rects[i].depth;
			bufferData[bi++] = rects[i].positions[10];
			bufferData[bi++] = rects[i].positions[11];
			bufferData[bi++] = rects[i].color[0];
			bufferData[bi++] = rects[i].color[1];
			bufferData[bi++] = rects[i].color[2];
			bufferData[bi++] = rects[i].color[3];
			bufferData[bi++] = rects[i].textureIndex;
			bufferData[bi++] = rects[i].textureCoordinates[10];
			bufferData[bi++] = rects[i].textureCoordinates[11];
			bufferData[bi++] = rects[i].translation[0];
			bufferData[bi++] = rects[i].translation[1];
			bufferData[bi++] = rects[i].rotation[0];
			bufferData[bi++] = rects[i].rotation[1];
			bufferData[bi++] = rects[i].alpha;
			bufferData[bi++] = rects[i].depth;
		}
		return bufferData;
	}
	,rectToVertices: function(rect) {
		var x1 = rect.x;
		var x2 = rect.x + rect.width;
		var y1 = rect.y;
		var y2 = rect.y + rect.height;
		var color = feint_utils_Math.colorToVec4(rect.color);
		return [x1,y1,color[0],color[1],color[2],color[3],x2,y1,color[0],color[1],color[2],color[3],x1,y2,color[0],color[1],color[2],color[3],x1,y2,color[0],color[1],color[2],color[3],x2,y1,color[0],color[1],color[2],color[3],x2,y2,color[0],color[1],color[2],color[3]];
	}
	,__class__: feint_renderer_backends_BatchRenderWebGLShader
});
var feint_renderer_backends_CanvasRenderContext = function(canvas,context,width,height) {
	this.width = width;
	this.height = height;
	this.api = feint_renderer_RenderAPI.Canvas;
	this.canvas = canvas;
	this.context = context;
	this.setup();
};
$hxClasses["feint.renderer.backends.CanvasRenderContext"] = feint_renderer_backends_CanvasRenderContext;
feint_renderer_backends_CanvasRenderContext.__name__ = "feint.renderer.backends.CanvasRenderContext";
feint_renderer_backends_CanvasRenderContext.__interfaces__ = [feint_renderer_RenderContext];
feint_renderer_backends_CanvasRenderContext.colorToRGBA = function(color) {
	var alpha = (color >> 24 & 255) / 255;
	var red = color >> 16 & 255;
	var green = color >> 8 & 255;
	var blue = color & 255;
	return "rgba(" + red + ", " + green + ", " + blue + ", " + alpha + ")";
};
feint_renderer_backends_CanvasRenderContext.prototype = {
	setup: function() {
		var tmp = this.width * window.devicePixelRatio;
		this.canvas.width = Math.floor(tmp);
		var tmp = this.height * window.devicePixelRatio;
		this.canvas.height = Math.floor(tmp);
		this.canvas.style.width = this.width + "px";
		this.canvas.style.height = this.height + "px";
		this.context.scale(window.devicePixelRatio,window.devicePixelRatio);
		this.context.imageSmoothingEnabled = false;
	}
	,clear: function(color) {
		if(color == null) {
			color = -16777216;
		}
		this.context.clearRect(0,0,this.canvas.width,this.canvas.height);
		this.drawRect(0,0,this.canvas.width,this.canvas.height,0,color);
		this.context.rotate(0);
	}
	,submit: function() {
	}
	,resize: function(width,height) {
		throw new feint_debug_FeintException("NotImplemented","RenderContext.resize() not implemented for Canvas");
	}
	,drawRect: function(x,y,width,height,rotation,color,alpha,depth) {
		if(depth == null) {
			depth = 1.0;
		}
		if(alpha == null) {
			alpha = 1.0;
		}
		if(color == null) {
			color = -1;
		}
		if(rotation == null) {
			rotation = 0.0;
		}
		if(this.camera != null) {
			this.context.setTransform(this.camera.scale,0,0,this.camera.scale,this.camera.translation.x,this.camera.translation.y);
			this.context.scale(window.devicePixelRatio,window.devicePixelRatio);
			this.context.rotate(this.camera.rotation);
		}
		this.context.translate(x,y);
		this.context.translate(width / 2,height / 2);
		this.context.rotate(rotation);
		this.context.translate(-width / 2,-height / 2);
		var alpha = (color >> 24 & 255) / 255;
		var red = color >> 16 & 255;
		var green = color >> 8 & 255;
		var blue = color & 255;
		this.context.fillStyle = "rgba(" + red + ", " + green + ", " + blue + ", " + alpha + ")";
		this.context.fillRect(0,0,width,height);
		this.context.setTransform(1,0,0,1,0,0);
		this.context.scale(window.devicePixelRatio,window.devicePixelRatio);
	}
	,drawImage: function(x,y,assetId,textureWidth,textureHeight,rotation,xScale,yScale,color,alpha,depth,clip) {
		if(depth == null) {
			depth = 1.0;
		}
		if(alpha == null) {
			alpha = 1.0;
		}
		if(color == null) {
			color = -1;
		}
		if(yScale == null) {
			yScale = 1;
		}
		if(xScale == null) {
			xScale = 1;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(this.camera != null) {
			this.context.setTransform(this.camera.scale,0,0,this.camera.scale,this.camera.translation.x,this.camera.translation.y);
			this.context.scale(window.devicePixelRatio,window.devicePixelRatio);
			this.context.rotate(this.camera.rotation);
		}
		var textureEmbedded = Object.prototype.hasOwnProperty.call(feint_assets_macros_AssetEmbed.embeddedAssets.h,assetId);
		var image;
		if(textureEmbedded) {
			image = new Image();
			var embeddedBytes = feint_assets_macros_AssetEmbed.embeddedAssets.h[assetId];
			image.src = "data:image/png;base64," + haxe_crypto_Base64.encode(embeddedBytes);
		} else {
			image = window.document.getElementById(assetId);
		}
		this.context.translate(x,y);
		this.context.rotate(rotation);
		if(clip != null) {
			if(xScale != null) {
				this.context.drawImage(image,clip.x,clip.y,clip.width,clip.height,0,0,clip.width * xScale,clip.height * yScale);
			} else {
				this.context.drawImage(image,clip.x,clip.y,clip.width,clip.height,0,0,clip.width,clip.height);
			}
		} else {
			this.context.drawImage(image,0,0);
		}
		this.context.setTransform(1,0,0,1,0,0);
		this.context.scale(window.devicePixelRatio,window.devicePixelRatio);
	}
	,drawText: function(x,y,text,fontSize,font,align) {
		if(this.camera != null) {
			this.context.setTransform(this.camera.scale,0,0,this.camera.scale,this.camera.translation.x,this.camera.translation.y);
			this.context.scale(window.devicePixelRatio,window.devicePixelRatio);
			this.context.rotate(2 * Math.PI - this.camera.rotation);
		}
		this.context.rotate(0);
		this.context.textAlign = align;
		var alpha = 1.;
		var red = 255;
		var green = 255;
		var blue = 255;
		this.context.fillStyle = "rgba(" + red + ", " + green + ", " + blue + ", " + alpha + ")";
		this.context.font = "" + fontSize + "px " + font;
		this.context.textBaseline = "top";
		this.context.fillText(text,x,y);
	}
	,__class__: feint_renderer_backends_CanvasRenderContext
};
var feint_renderer_backends_WebGLRenderContext = function(canvas,context,width,height) {
	this.width = width;
	this.height = height;
	this.api = feint_renderer_RenderAPI.WebGL;
	this.canvas = canvas;
	this.context = context;
	this.defaultCamera = new feint_renderer_Camera();
	this.camera = this.defaultCamera;
	this.setup();
};
$hxClasses["feint.renderer.backends.WebGLRenderContext"] = feint_renderer_backends_WebGLRenderContext;
feint_renderer_backends_WebGLRenderContext.__name__ = "feint.renderer.backends.WebGLRenderContext";
feint_renderer_backends_WebGLRenderContext.__interfaces__ = [feint_renderer_RenderContext];
feint_renderer_backends_WebGLRenderContext.prototype = {
	clear: function(color) {
		if(color == null) {
			color = -16777216;
		}
		this.context.viewport(0,0,this.context.canvas.width,this.context.canvas.height);
		this.context.clearColor(0,0,0,1);
		this.context.clearDepth(1);
		this.context.clear(16640);
		this.context.flush();
		if(window.document.getElementById("feint-webgl-text") != null) {
			window.document.getElementById("feint-webgl-text").innerHTML = "";
		}
		if(this.textRenderContext != null) {
			this.textRenderContext.context.clearRect(0,0,this.canvas.width,this.canvas.height);
		}
		this.batchRender.rects = [];
	}
	,submit: function() {
		if(this.camera == null) {
			this.batchRender.cameraProjection = this.defaultCamera.projection;
		} else {
			this.batchRender.cameraProjection = this.camera.projection;
		}
		this.batchRender.use(this.context);
		this.batchRender.draw(this.context);
		this.batchRender.rects = [];
	}
	,resize: function(width,height) {
		throw new feint_debug_FeintException("NotImplemented","RenderContext.resize() not implemented for WebGL");
	}
	,drawRect: function(x,y,width,height,rotation,color,alpha,depth) {
		if(depth == null) {
			depth = 1.0;
		}
		if(alpha == null) {
			alpha = 1.0;
		}
		if(color == null) {
			color = -1;
		}
		if(rotation == null) {
			rotation = 0.0;
		}
		this.batchRender.addRect(x,y,width,height,color,rotation,alpha,depth);
	}
	,drawImage: function(x,y,assetId,textureWidth,textureHeight,rotation,xScale,yScale,color,alpha,depth,clip) {
		if(depth == null) {
			depth = 1.0;
		}
		if(alpha == null) {
			alpha = 1.0;
		}
		if(color == null) {
			color = -1;
		}
		if(yScale == null) {
			yScale = 1;
		}
		if(xScale == null) {
			xScale = 1;
		}
		if(rotation == null) {
			rotation = 0;
		}
		var _gthis = this;
		var textureInitialized = Object.prototype.hasOwnProperty.call(this.textures.h,assetId);
		var textureLoaded = textureInitialized && this.textures.h[assetId] != null;
		var textureEmbedded = Object.prototype.hasOwnProperty.call(feint_assets_macros_AssetEmbed.embeddedAssets.h,assetId);
		if(!textureInitialized) {
			if(textureEmbedded) {
				var image = new Image();
				var embeddedBytes = feint_assets_macros_AssetEmbed.embeddedAssets.h[assetId];
				var tmp = haxe_crypto_Base64.encode(embeddedBytes);
				image.src = "data:image/png;base64," + tmp;
				var v = null;
				this.textures.h[assetId] = v;
				this.textureIndex.push(assetId);
				this.textureId.h[assetId] = 0;
				image.addEventListener("load",function() {
					_gthis.textures.h[assetId] = image;
					var this1 = _gthis.textureId;
					var v = _gthis.batchRender.bindTexture(_gthis.context,_gthis.textures.h[assetId]);
					this1.h[assetId] = v;
					return v;
				});
			} else {
				var imageElem = window.document.getElementById(assetId);
				var image1 = new Image();
				var v = null;
				this.textures.h[assetId] = v;
				this.textureIndex.push(assetId);
				this.textureId.h[assetId] = 0;
				var filepath = imageElem.src;
				if(HxOverrides.substr(process.platform,0,3) == "win") {
					filepath = HxOverrides.substr(imageElem.src,8,null);
				} else {
					filepath = HxOverrides.substr(imageElem.src,7,null);
				}
				var base64Image = js_node_Fs.readFileSync(js_node_Querystring.unescape(filepath),"base64");
				image1.src = "data:image/png;base64," + base64Image;
				image1.addEventListener("load",function() {
					_gthis.textures.h[assetId] = image1;
					var this1 = _gthis.textureId;
					var v = _gthis.batchRender.bindTexture(_gthis.context,_gthis.textures.h[assetId]);
					this1.h[assetId] = v;
					return v;
				});
			}
		} else {
			var textureLoaded1 = textureLoaded;
		}
		if(clip != null && textureWidth != null && textureHeight != null) {
			this.batchRender.addClipRect(x,y,clip.width * xScale,clip.height * yScale,clip.x / textureWidth,(clip.x + clip.width) / textureWidth,clip.y / textureHeight,(clip.y + clip.height) / textureHeight,color,rotation,alpha,depth,this.textureId.h[assetId]);
		} else {
			this.batchRender.addRect(x,y,clip.width * xScale,clip.height * yScale,color,rotation,alpha,depth,this.textureId.h[assetId]);
		}
	}
	,drawText: function(x,y,text,fontSize,font,align) {
		if(this.textRenderContext != null) {
			this.textRenderContext.camera = this.camera;
			this.textRenderContext.drawText(x,y,text,fontSize,font,align);
		}
	}
	,setup: function() {
		this.canvas.width = Math.floor(this.width);
		this.canvas.height = Math.floor(this.height);
		this.canvas.style.width = this.width + "px";
		this.canvas.style.height = this.height + "px";
		this.canvas.style.imageRendering = "pixelated";
		this.batchRender = new feint_renderer_backends_BatchRenderWebGLShader();
		this.batchRender.load();
		this.batchRender.compile(this.context);
		this.textures = new haxe_ds_StringMap();
		this.textureId = new haxe_ds_StringMap();
		this.textureIndex = [];
		this.context.enable(3042);
		this.context.blendFunc(770,771);
		this.context.enable(2929);
		this.context.depthMask(true);
		this.context.depthFunc(515);
		this.context.depthRange(0.0,1.0);
		this.setupTextRenderContext();
	}
	,setupTextRenderContext: function() {
		this.textCanvas = window.document.createElement("canvas");
		this.textCanvas.id = "feint-webgl-text";
		this.textCanvas.width = this.width | 0;
		this.textCanvas.height = this.height | 0;
		this.textCanvas.style.position = "absolute";
		this.textCanvas.style.top = "0";
		this.textCanvas.style.left = "0";
		this.textCanvas.style.zIndex = "1";
		this.textCanvas.style.background = "transparent";
		window.document.body.appendChild(this.textCanvas);
		var textCanvasContext = this.textCanvas.getContext("2d");
		this.textRenderContext = new feint_renderer_backends_CanvasRenderContext(this.textCanvas,textCanvasContext,this.width,this.height);
	}
	,requestCORSIfNotSameOrigin: function(img,url) {
		var notOrigin = new URL(url,window.location.href).origin != window.location.origin;
		if(notOrigin) {
			img.crossOrigin = "anonymous";
		}
	}
	,__class__: feint_renderer_backends_WebGLRenderContext
};
var feint_renderer_platforms_WebRenderPlatform = function() { };
$hxClasses["feint.renderer.platforms.WebRenderPlatform"] = feint_renderer_platforms_WebRenderPlatform;
feint_renderer_platforms_WebRenderPlatform.__name__ = "feint.renderer.platforms.WebRenderPlatform";
feint_renderer_platforms_WebRenderPlatform.createContext = function(width,height,api) {
	if(api == null) {
		api = feint_renderer_RenderAPI.WebGL;
	}
	var canvas = feint_renderer_platforms_WebRenderPlatform.createCanvasElement(width,height);
	switch(api._hx_index) {
	case 0:
		feint_debug_Logger.info("Creating Canvas RenderContext...");
		var canvasContext = canvas.getContext("2d",{ alpha : false});
		return new feint_renderer_backends_CanvasRenderContext(canvas,canvasContext,width,height);
	case 1:
		feint_debug_Logger.info("Creating WebGL RenderContext...");
		var webglContext = canvas.getContext("webgl",{ alpha : false});
		if(webglContext == null) {
			feint_debug_Logger.info("WebGL not supported, falling back to Canvas.");
			webglContext = null;
			feint_debug_Logger.info("Creating Canvas RenderContext...");
			var canvasContext = canvas.getContext("2d",{ alpha : false});
			return new feint_renderer_backends_CanvasRenderContext(canvas,canvasContext,width,height);
		} else {
			return new feint_renderer_backends_WebGLRenderContext(canvas,webglContext,width,height);
		}
		break;
	case 2:
		throw new feint_debug_FeintException("NotImplemented","WebGL2RenderContext not implemented...");
	}
};
feint_renderer_platforms_WebRenderPlatform.createCanvasElement = function(width,height) {
	var editorViewportCanvas = js_Boot.__cast(window.document.getElementById("feint-editor-viewport") , HTMLCanvasElement);
	if(editorViewportCanvas != null) {
		editorViewportCanvas.width = width | 0;
		editorViewportCanvas.height = height | 0;
		editorViewportCanvas.textContent = "[Feint] This browser is not supported";
		return editorViewportCanvas;
	}
	var canvas = window.document.createElement("canvas");
	canvas.id = "feint";
	canvas.width = width | 0;
	canvas.height = height | 0;
	canvas.textContent = "[Feint] This browser is not supported";
	window.document.body.appendChild(canvas);
	return canvas;
};
var feint_scene_Scene = function() {
	this.camera = new feint_renderer_Camera();
};
$hxClasses["feint.scene.Scene"] = feint_scene_Scene;
feint_scene_Scene.__name__ = "feint.scene.Scene";
feint_scene_Scene.prototype = {
	init: function() {
		this.forge = new feint_forge_Forge();
	}
	,update: function(elapsed) {
		this.forge.update(elapsed);
	}
	,render: function(renderer) {
		renderer.set_camera(this.camera);
		this.forge.render(renderer);
	}
	,__class__: feint_scene_Scene
};
var feint_utils_Math = function() { };
$hxClasses["feint.utils.Math"] = feint_utils_Math;
feint_utils_Math.__name__ = "feint.utils.Math";
feint_utils_Math.clampFloat = function(num,min,max) {
	if(num < min) {
		return min;
	}
	if(num > max) {
		return max;
	}
	return num;
};
feint_utils_Math.clamp = function(num,min,max) {
	switch(num._hx_index) {
	case 0:
		var i = num.v;
		if(i < js_Boot.__cast(min , Int)) {
			return min;
		}
		if(i > js_Boot.__cast(max , Int)) {
			return max;
		}
		return i;
	case 1:
		var f = num.v;
		if(f < js_Boot.__cast(min , Float)) {
			return min;
		}
		if(f > js_Boot.__cast(max , Float)) {
			return max;
		}
		return f;
	}
};
feint_utils_Math.colorToVec4 = function(color) {
	var alpha = (color >> 24 & 255) / 255;
	var red = (color >> 16 & 255) / 255;
	var green = (color >> 8 & 255) / 255;
	var blue = (color & 255) / 255;
	return [red,green,blue,alpha];
};
feint_utils_Math.isPowerOf2 = function(value) {
	return (value & value - 1) == 0;
};
var feint_utils_OneOf = {};
feint_utils_OneOf.fromA = function(a) {
	return haxe_ds_Either.Left(a);
};
feint_utils_OneOf.fromB = function(b) {
	return haxe_ds_Either.Right(b);
};
feint_utils_OneOf.toA = function(this1) {
	if(this1._hx_index == 0) {
		var a = this1.v;
		return a;
	} else {
		return null;
	}
};
feint_utils_OneOf.toB = function(this1) {
	if(this1._hx_index == 1) {
		var b = this1.v;
		return b;
	} else {
		return null;
	}
};
var feint_utils_Matrix = function() { };
$hxClasses["feint.utils.Matrix"] = feint_utils_Matrix;
feint_utils_Matrix.__name__ = "feint.utils.Matrix";
feint_utils_Matrix.multiply = function(a,b) {
	var a00 = a[0];
	var a01 = a[1];
	var a02 = a[2];
	var a10 = a[3];
	var a11 = a[4];
	var a12 = a[5];
	var a20 = a[6];
	var a21 = a[7];
	var a22 = a[8];
	var b00 = b[0];
	var b01 = b[1];
	var b02 = b[2];
	var b10 = b[3];
	var b11 = b[4];
	var b12 = b[5];
	var b20 = b[6];
	var b21 = b[7];
	var b22 = b[8];
	return [b00 * a00 + b01 * a10 + b02 * a20,b00 * a01 + b01 * a11 + b02 * a21,b00 * a02 + b01 * a12 + b02 * a22,b10 * a00 + b11 * a10 + b12 * a20,b10 * a01 + b11 * a11 + b12 * a21,b10 * a02 + b11 * a12 + b12 * a22,b20 * a00 + b21 * a10 + b22 * a20,b20 * a01 + b21 * a11 + b22 * a21,b20 * a02 + b21 * a12 + b22 * a22];
};
feint_utils_Matrix.translation = function(tx,ty) {
	return [1,0,0,0,1,0,tx,ty,1];
};
feint_utils_Matrix.rotation = function(angleInRadians) {
	var c = Math.cos(angleInRadians);
	var s = Math.sin(angleInRadians);
	return [c,-s,0,s,c,0,0,0,1];
};
feint_utils_Matrix.scaling = function(sx,sy) {
	return [sx,0,0,0,sy,0,0,0,1];
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	__class__: haxe_ValueException
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_Either = $hxEnums["haxe.ds.Either"] = { __ename__ : true, __constructs__ : ["Left","Right"]
	,Left: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Right: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(key | 0);
		return new haxe_iterators_ArrayIterator(a);
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.keysIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return keys[idx - 1];
	}};
};
haxe_ds_StringMap.kvIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		var k = keys[idx - 1];
		return { key : k, value : h[k]};
	}};
};
haxe_ds_StringMap.prototype = {
	get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,keys: function() {
		return haxe_ds_StringMap.keysIterator(this.h);
	}
	,keyValueIterator: function() {
		return haxe_ds_StringMap.kvIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
$hxClasses["haxe.iterators.MapKeyValueIterator"] = haxe_iterators_MapKeyValueIterator;
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
haxe_iterators_MapKeyValueIterator.prototype = {
	hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var haxe_rtti_Meta = function() { };
$hxClasses["haxe.rtti.Meta"] = haxe_rtti_Meta;
haxe_rtti_Meta.__name__ = "haxe.rtti.Meta";
haxe_rtti_Meta.getType = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.obj == null) {
		return { };
	} else {
		return meta.obj;
	}
};
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_node_Fs = require("fs");
var js_node_KeyValue = {};
js_node_KeyValue.get_key = function(this1) {
	return this1[0];
};
js_node_KeyValue.get_value = function(this1) {
	return this1[1];
};
var js_node_Querystring = require("querystring");
var js_node_stream_WritableNewOptionsAdapter = {};
js_node_stream_WritableNewOptionsAdapter.from = function(options) {
	if(!Object.prototype.hasOwnProperty.call(options,"final")) {
		Object.defineProperty(options,"final",{ get : function() {
			return options.final_;
		}});
	}
	return options;
};
var js_node_url_URLSearchParamsEntry = {};
js_node_url_URLSearchParamsEntry._new = function(name,value) {
	var this1 = [name,value];
	return this1;
};
js_node_url_URLSearchParamsEntry.get_name = function(this1) {
	return this1[0];
};
js_node_url_URLSearchParamsEntry.get_value = function(this1) {
	return this1[1];
};
var scenes_PlayScene = function() {
	feint_scene_Scene.call(this);
};
$hxClasses["scenes.PlayScene"] = scenes_PlayScene;
scenes_PlayScene.__name__ = "scenes.PlayScene";
scenes_PlayScene.__super__ = feint_scene_Scene;
scenes_PlayScene.prototype = $extend(feint_scene_Scene.prototype,{
	__class__: scenes_PlayScene
});
var scenes_TitleScreenScene = function() {
	feint_scene_Scene.call(this);
};
$hxClasses["scenes.TitleScreenScene"] = scenes_TitleScreenScene;
scenes_TitleScreenScene.__name__ = "scenes.TitleScreenScene";
scenes_TitleScreenScene.__super__ = feint_scene_Scene;
scenes_TitleScreenScene.prototype = $extend(feint_scene_Scene.prototype,{
	init: function() {
		feint_scene_Scene.prototype.init.call(this);
		this.forge.addEntity(feint_forge_Entity.create(),[new feint_library_PositionComponent(0,0),new feint_library_BitmapTextComponent("micro adventure",32)]);
		this.forge.addEntity(feint_forge_Entity.create(),[new feint_library_PositionComponent(0,320),new feint_library_BitmapTextComponent("press ENTER to start",32)]);
		this.forge.addSystem(new scenes_ChangeSceneSystem(this.game.window.inputManager,this.game));
		this.forge.addRenderSystem(new feint_library_BitmapTextRenderSystem());
	}
	,__class__: scenes_TitleScreenScene
});
var scenes_ChangeSceneSystem = function(inputManager,game) {
	this.inputManager = inputManager;
	this.game = game;
};
$hxClasses["scenes.ChangeSceneSystem"] = scenes_ChangeSceneSystem;
scenes_ChangeSceneSystem.__name__ = "scenes.ChangeSceneSystem";
scenes_ChangeSceneSystem.__super__ = feint_forge_System;
scenes_ChangeSceneSystem.prototype = $extend(feint_forge_System.prototype,{
	update: function(elapsed,forge) {
		if(this.inputManager.keyboard.keys.get(13) == feint_input_device_KeyState.JustPressed) {
			this.game.changeScene(new scenes_PlayScene());
		}
	}
	,__class__: scenes_ChangeSceneSystem
});
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
feint_assets_macros_AssetEmbed.embeddedAssets = new haxe_ds_StringMap();
feint_forge_Entity.INVALID = 0;
feint_forge_Entity.nextId = 1;
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
feint_graphics_DefaultBitmapFont.gmsNuevoFnt = "info face=\"Generic Mobile System Nuevo\" size=16 bold=0 italic=0 charset=\"\" unicode=0 stretchH=100 smooth=1 aa=1 padding=1,1,1,1 spacing=-2,-2\ncommon lineHeight=16 base=12 scaleW=256 scaleH=256 pages=1 packed=0\npage id=0 file=\"GenericMobileSystemNuevo.png\"\nchars count=190\nchar id=0       x=98   y=28   width=11   height=12   xoffset=0    yoffset=2    xadvance=14   page=0    chnl=0 \nchar id=10      x=98   y=28   width=11   height=12   xoffset=0    yoffset=2    xadvance=14   page=0    chnl=0 \nchar id=32      x=0    y=0    width=0    height=0    xoffset=-1   yoffset=11   xadvance=4    page=0    chnl=0 \nchar id=33      x=234  y=28   width=4    height=12   xoffset=-1   yoffset=1    xadvance=3    page=0    chnl=0 \nchar id=34      x=111  y=64   width=7    height=5    xoffset=-1   yoffset=1    xadvance=6    page=0    chnl=0 \nchar id=35      x=15   y=40   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=36      x=0    y=0    width=9    height=15   xoffset=-1   yoffset=0    xadvance=8    page=0    chnl=0 \nchar id=37      x=6    y=40   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=38      x=24   y=40   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=39      x=124  y=64   width=4    height=5    xoffset=-1   yoffset=1    xadvance=3    page=0    chnl=0 \nchar id=40      x=34   y=0    width=5    height=14   xoffset=-1   yoffset=1    xadvance=4    page=0    chnl=0 \nchar id=41      x=39   y=0    width=5    height=14   xoffset=-1   yoffset=1    xadvance=4    page=0    chnl=0 \nchar id=42      x=31   y=64   width=7    height=8    xoffset=-1   yoffset=3    xadvance=6    page=0    chnl=0 \nchar id=43      x=63   y=64   width=8    height=7    xoffset=-1   yoffset=5    xadvance=7    page=0    chnl=0 \nchar id=44      x=101  y=64   width=4    height=6    xoffset=-1   yoffset=9    xadvance=3    page=0    chnl=0 \nchar id=45      x=182  y=64   width=7    height=3    xoffset=-1   yoffset=7    xadvance=6    page=0    chnl=0 \nchar id=46      x=171  y=64   width=4    height=4    xoffset=-1   yoffset=9    xadvance=3    page=0    chnl=0 \nchar id=47      x=246  y=28   width=6    height=12   xoffset=-1   yoffset=1    xadvance=5    page=0    chnl=0 \nchar id=48      x=226  y=28   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=49      x=156  y=28   width=6    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=50      x=162  y=28   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=51      x=170  y=28   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=52      x=178  y=28   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=53      x=186  y=28   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=54      x=194  y=28   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=55      x=202  y=28   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=56      x=210  y=28   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=57      x=218  y=28   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=58      x=27   y=64   width=4    height=8    xoffset=-1   yoffset=3    xadvance=3    page=0    chnl=0 \nchar id=59      x=116  y=52   width=4    height=10   xoffset=-1   yoffset=3    xadvance=3    page=0    chnl=0 \nchar id=60      x=227  y=52   width=9    height=9    xoffset=-1   yoffset=3    xadvance=8    page=0    chnl=0 \nchar id=61      x=136  y=64   width=7    height=5    xoffset=-1   yoffset=5    xadvance=6    page=0    chnl=0 \nchar id=62      x=236  y=52   width=9    height=9    xoffset=-1   yoffset=3    xadvance=8    page=0    chnl=0 \nchar id=63      x=238  y=28   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=64      x=74   y=0    width=9    height=14   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=65      x=129  y=15   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=66      x=138  y=15   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=67      x=147  y=15   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=68      x=156  y=15   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=69      x=165  y=15   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=70      x=174  y=15   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=71      x=183  y=15   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=72      x=192  y=15   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=73      x=201  y=15   width=4    height=12   xoffset=-1   yoffset=1    xadvance=3    page=0    chnl=0 \nchar id=74      x=205  y=15   width=7    height=12   xoffset=-1   yoffset=1    xadvance=6    page=0    chnl=0 \nchar id=75      x=212  y=15   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=76      x=221  y=15   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=77      x=229  y=15   width=11   height=12   xoffset=-1   yoffset=1    xadvance=10   page=0    chnl=0 \nchar id=78      x=240  y=15   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=79      x=0    y=28   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=80      x=9    y=28   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=81      x=18   y=0    width=9    height=14   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=82      x=18   y=28   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=83      x=27   y=28   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=84      x=36   y=28   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=85      x=44   y=28   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=86      x=53   y=28   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=87      x=62   y=28   width=10   height=12   xoffset=-1   yoffset=1    xadvance=9    page=0    chnl=0 \nchar id=88      x=72   y=28   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=89      x=81   y=28   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=90      x=89   y=28   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=91      x=44   y=0    width=6    height=14   xoffset=-1   yoffset=1    xadvance=5    page=0    chnl=0 \nchar id=92      x=0    y=40   width=6    height=12   xoffset=-1   yoffset=1    xadvance=5    page=0    chnl=0 \nchar id=93      x=50   y=0    width=6    height=14   xoffset=-1   yoffset=1    xadvance=5    page=0    chnl=0 \nchar id=94      x=128  y=64   width=8    height=5    xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=95      x=189  y=64   width=9    height=3    xoffset=-1   yoffset=13   xadvance=8    page=0    chnl=0 \nchar id=96      x=118  y=64   width=6    height=5    xoffset=-1   yoffset=1    xadvance=5    page=0    chnl=0 \nchar id=97      x=120  y=52   width=8    height=9    xoffset=-1   yoffset=4    xadvance=7    page=0    chnl=0 \nchar id=98      x=109  y=28   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=99      x=128  y=52   width=8    height=9    xoffset=-1   yoffset=4    xadvance=7    page=0    chnl=0 \nchar id=100     x=117  y=28   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=101     x=136  y=52   width=8    height=9    xoffset=-1   yoffset=4    xadvance=7    page=0    chnl=0 \nchar id=102     x=249  y=15   width=6    height=12   xoffset=-1   yoffset=1    xadvance=5    page=0    chnl=0 \nchar id=103     x=64   y=52   width=8    height=11   xoffset=-1   yoffset=4    xadvance=7    page=0    chnl=0 \nchar id=104     x=125  y=28   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=105     x=133  y=28   width=4    height=12   xoffset=-1   yoffset=1    xadvance=3    page=0    chnl=0 \nchar id=106     x=27   y=0    width=7    height=14   xoffset=-1   yoffset=1    xadvance=6    page=0    chnl=0 \nchar id=107     x=137  y=28   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=108     x=145  y=28   width=5    height=12   xoffset=-1   yoffset=1    xadvance=4    page=0    chnl=0 \nchar id=109     x=144  y=52   width=10   height=9    xoffset=-1   yoffset=4    xadvance=9    page=0    chnl=0 \nchar id=110     x=154  y=52   width=8    height=9    xoffset=-1   yoffset=4    xadvance=7    page=0    chnl=0 \nchar id=111     x=162  y=52   width=8    height=9    xoffset=-1   yoffset=4    xadvance=7    page=0    chnl=0 \nchar id=112     x=72   y=52   width=8    height=11   xoffset=-1   yoffset=4    xadvance=7    page=0    chnl=0 \nchar id=113     x=80   y=52   width=8    height=11   xoffset=-1   yoffset=4    xadvance=7    page=0    chnl=0 \nchar id=114     x=170  y=52   width=7    height=9    xoffset=-1   yoffset=4    xadvance=6    page=0    chnl=0 \nchar id=115     x=177  y=52   width=8    height=9    xoffset=-1   yoffset=4    xadvance=7    page=0    chnl=0 \nchar id=116     x=150  y=28   width=6    height=12   xoffset=-1   yoffset=1    xadvance=5    page=0    chnl=0 \nchar id=117     x=185  y=52   width=8    height=9    xoffset=-1   yoffset=4    xadvance=7    page=0    chnl=0 \nchar id=118     x=193  y=52   width=8    height=9    xoffset=-1   yoffset=4    xadvance=7    page=0    chnl=0 \nchar id=119     x=201  y=52   width=10   height=9    xoffset=-1   yoffset=4    xadvance=9    page=0    chnl=0 \nchar id=120     x=211  y=52   width=8    height=9    xoffset=-1   yoffset=4    xadvance=7    page=0    chnl=0 \nchar id=121     x=88   y=52   width=8    height=11   xoffset=-1   yoffset=4    xadvance=7    page=0    chnl=0 \nchar id=122     x=219  y=52   width=8    height=9    xoffset=-1   yoffset=4    xadvance=7    page=0    chnl=0 \nchar id=123     x=56   y=0    width=7    height=14   xoffset=-1   yoffset=1    xadvance=6    page=0    chnl=0 \nchar id=124     x=70   y=0    width=4    height=14   xoffset=-1   yoffset=1    xadvance=3    page=0    chnl=0 \nchar id=125     x=63   y=0    width=7    height=14   xoffset=-1   yoffset=1    xadvance=6    page=0    chnl=0 \nchar id=126     x=143  y=64   width=9    height=5    xoffset=-1   yoffset=5    xadvance=8    page=0    chnl=0 \nchar id=161     x=96   y=52   width=4    height=11   xoffset=-1   yoffset=4    xadvance=3    page=0    chnl=0 \nchar id=162     x=137  y=0    width=8    height=13   xoffset=-1   yoffset=2    xadvance=7    page=0    chnl=0 \nchar id=163     x=33   y=40   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=164     x=38   y=64   width=7    height=8    xoffset=-1   yoffset=3    xadvance=6    page=0    chnl=0 \nchar id=165     x=42   y=40   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=166     x=83   y=0    width=4    height=14   xoffset=-1   yoffset=1    xadvance=3    page=0    chnl=0 \nchar id=167     x=87   y=0    width=8    height=14   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=168     x=175  y=64   width=7    height=4    xoffset=-1   yoffset=1    xadvance=6    page=0    chnl=0 \nchar id=169     x=50   y=40   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=170     x=71   y=64   width=7    height=7    xoffset=-1   yoffset=1    xadvance=6    page=0    chnl=0 \nchar id=171     x=45   y=64   width=9    height=8    xoffset=-1   yoffset=5    xadvance=8    page=0    chnl=0 \nchar id=172     x=152  y=64   width=8    height=5    xoffset=-1   yoffset=6    xadvance=7    page=0    chnl=0 \nchar id=174     x=59   y=40   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=176     x=105  y=64   width=6    height=6    xoffset=-1   yoffset=1    xadvance=5    page=0    chnl=0 \nchar id=177     x=245  y=52   width=8    height=9    xoffset=-1   yoffset=3    xadvance=7    page=0    chnl=0 \nchar id=178     x=78   y=64   width=6    height=7    xoffset=-1   yoffset=1    xadvance=5    page=0    chnl=0 \nchar id=179     x=84   y=64   width=6    height=7    xoffset=-1   yoffset=1    xadvance=5    page=0    chnl=0 \nchar id=180     x=160  y=64   width=5    height=5    xoffset=-1   yoffset=1    xadvance=4    page=0    chnl=0 \nchar id=181     x=100  y=52   width=8    height=11   xoffset=-1   yoffset=4    xadvance=7    page=0    chnl=0 \nchar id=182     x=95   y=0    width=9    height=14   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=183     x=171  y=64   width=4    height=4    xoffset=-1   yoffset=5    xadvance=3    page=0    chnl=0 \nchar id=184     x=165  y=64   width=6    height=5    xoffset=-1   yoffset=11   xadvance=5    page=0    chnl=0 \nchar id=185     x=90   y=64   width=5    height=7    xoffset=-1   yoffset=1    xadvance=4    page=0    chnl=0 \nchar id=186     x=95   y=64   width=6    height=7    xoffset=-1   yoffset=1    xadvance=5    page=0    chnl=0 \nchar id=187     x=54   y=64   width=9    height=8    xoffset=-1   yoffset=5    xadvance=8    page=0    chnl=0 \nchar id=188     x=68   y=40   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=189     x=77   y=40   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=190     x=86   y=40   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=191     x=145  y=0    width=8    height=13   xoffset=-1   yoffset=2    xadvance=7    page=0    chnl=0 \nchar id=192     x=153  y=0    width=9    height=13   xoffset=-1   yoffset=0    xadvance=8    page=0    chnl=0 \nchar id=193     x=162  y=0    width=9    height=13   xoffset=-1   yoffset=0    xadvance=8    page=0    chnl=0 \nchar id=194     x=171  y=0    width=9    height=13   xoffset=-1   yoffset=0    xadvance=8    page=0    chnl=0 \nchar id=195     x=180  y=0    width=9    height=13   xoffset=-1   yoffset=0    xadvance=8    page=0    chnl=0 \nchar id=196     x=189  y=0    width=9    height=13   xoffset=-1   yoffset=0    xadvance=8    page=0    chnl=0 \nchar id=197     x=198  y=0    width=9    height=13   xoffset=-1   yoffset=0    xadvance=8    page=0    chnl=0 \nchar id=198     x=95   y=40   width=11   height=12   xoffset=-1   yoffset=1    xadvance=10   page=0    chnl=0 \nchar id=199     x=104  y=0    width=9    height=14   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=200     x=207  y=0    width=9    height=13   xoffset=-1   yoffset=0    xadvance=8    page=0    chnl=0 \nchar id=201     x=216  y=0    width=9    height=13   xoffset=-1   yoffset=0    xadvance=8    page=0    chnl=0 \nchar id=202     x=225  y=0    width=9    height=13   xoffset=-1   yoffset=0    xadvance=8    page=0    chnl=0 \nchar id=203     x=234  y=0    width=9    height=13   xoffset=-1   yoffset=0    xadvance=8    page=0    chnl=0 \nchar id=204     x=243  y=0    width=5    height=13   xoffset=-1   yoffset=0    xadvance=4    page=0    chnl=0 \nchar id=205     x=248  y=0    width=5    height=13   xoffset=-1   yoffset=0    xadvance=4    page=0    chnl=0 \nchar id=206     x=0    y=15   width=7    height=13   xoffset=-1   yoffset=0    xadvance=6    page=0    chnl=0 \nchar id=207     x=7    y=15   width=7    height=13   xoffset=-1   yoffset=0    xadvance=6    page=0    chnl=0 \nchar id=208     x=106  y=40   width=10   height=12   xoffset=-1   yoffset=1    xadvance=9    page=0    chnl=0 \nchar id=209     x=14   y=15   width=9    height=13   xoffset=-1   yoffset=0    xadvance=8    page=0    chnl=0 \nchar id=210     x=23   y=15   width=9    height=13   xoffset=-1   yoffset=0    xadvance=8    page=0    chnl=0 \nchar id=211     x=32   y=15   width=9    height=13   xoffset=-1   yoffset=0    xadvance=8    page=0    chnl=0 \nchar id=212     x=41   y=15   width=9    height=13   xoffset=-1   yoffset=0    xadvance=8    page=0    chnl=0 \nchar id=213     x=50   y=15   width=9    height=13   xoffset=-1   yoffset=0    xadvance=8    page=0    chnl=0 \nchar id=214     x=59   y=15   width=9    height=13   xoffset=-1   yoffset=0    xadvance=8    page=0    chnl=0 \nchar id=215     x=0    y=64   width=9    height=9    xoffset=-1   yoffset=4    xadvance=8    page=0    chnl=0 \nchar id=216     x=9    y=0    width=9    height=15   xoffset=-1   yoffset=0    xadvance=8    page=0    chnl=0 \nchar id=217     x=68   y=15   width=9    height=13   xoffset=-1   yoffset=0    xadvance=8    page=0    chnl=0 \nchar id=218     x=77   y=15   width=9    height=13   xoffset=-1   yoffset=0    xadvance=8    page=0    chnl=0 \nchar id=219     x=86   y=15   width=9    height=13   xoffset=-1   yoffset=0    xadvance=8    page=0    chnl=0 \nchar id=220     x=95   y=15   width=9    height=13   xoffset=-1   yoffset=0    xadvance=8    page=0    chnl=0 \nchar id=221     x=104  y=15   width=8    height=13   xoffset=-1   yoffset=0    xadvance=7    page=0    chnl=0 \nchar id=222     x=116  y=40   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=223     x=125  y=40   width=9    height=12   xoffset=-1   yoffset=1    xadvance=8    page=0    chnl=0 \nchar id=224     x=134  y=40   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=225     x=142  y=40   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=226     x=150  y=40   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=227     x=158  y=40   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=228     x=166  y=40   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=229     x=112  y=15   width=8    height=13   xoffset=-1   yoffset=0    xadvance=7    page=0    chnl=0 \nchar id=230     x=9    y=64   width=10   height=9    xoffset=-1   yoffset=4    xadvance=9    page=0    chnl=0 \nchar id=231     x=108  y=52   width=8    height=11   xoffset=-1   yoffset=4    xadvance=7    page=0    chnl=0 \nchar id=232     x=174  y=40   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=233     x=182  y=40   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=234     x=190  y=40   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=235     x=198  y=40   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=236     x=206  y=40   width=5    height=12   xoffset=-1   yoffset=1    xadvance=4    page=0    chnl=0 \nchar id=237     x=211  y=40   width=5    height=12   xoffset=-1   yoffset=1    xadvance=4    page=0    chnl=0 \nchar id=238     x=216  y=40   width=7    height=12   xoffset=-1   yoffset=1    xadvance=6    page=0    chnl=0 \nchar id=239     x=223  y=40   width=7    height=12   xoffset=-1   yoffset=1    xadvance=6    page=0    chnl=0 \nchar id=240     x=230  y=40   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=241     x=238  y=40   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=242     x=246  y=40   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=243     x=0    y=52   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=244     x=8    y=52   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=245     x=16   y=52   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=246     x=24   y=52   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=247     x=19   y=64   width=8    height=9    xoffset=-1   yoffset=3    xadvance=7    page=0    chnl=0 \nchar id=248     x=120  y=15   width=9    height=13   xoffset=-1   yoffset=2    xadvance=8    page=0    chnl=0 \nchar id=249     x=32   y=52   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=250     x=40   y=52   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=251     x=48   y=52   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=252     x=56   y=52   width=8    height=12   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=253     x=113  y=0    width=8    height=14   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=254     x=121  y=0    width=8    height=14   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nchar id=255     x=129  y=0    width=8    height=14   xoffset=-1   yoffset=1    xadvance=7    page=0    chnl=0 \nkernings count=0\n";
feint_graphics_DefaultBitmapFont.gmsNuevoPng = haxe_Unserializer.run("s3358:iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAYAAABccqhmAAAJnUlEQVR42u3dy9KjOLMFUI3O%7:uGemfVldhKTMlLjZrRXR0lM1nYwwbKSVwa8C79d7::K::%e8Py:xnub%WOTJ6r37w3J%PHb3P4YsPHv9n3T78zeH7jF4n%Dez7THcaNXt%mGbtcH3%%cynz77f77:wbZpkecjn2HyOpH9sE22e5ts0:7AzzX9no:%bhQAvbijznay0Y70aUdvk8dCG3Gw4YZfYOBgHh0InwJmFHB9cvBltmufhObdAbAjJCIHwY6DKRMSV3yu1DKjUPg7AP5JyslOuGNHbaOdNPqBLg6AfrT%R%uWOPCqATBroVUCoAUDYnYghF::C5bJBMCjPtfosacEwDSpHhwAPRgAoS7DhgDoB%s3amn04t::5:tf6AL8yjI90IW7cpkWeSwSAKMd7O0BMDoQZgdOvzkAdjwfbuae2cR9yDKV7%bMZUoBcJhyPxQAqQLNYgBkD8z2kgCI7Bu:ssxXBsDhzqgFcEkAtB8JgOgJ5BcDINK9umKZLQGgBrCvCxCtrn9jAAyHUx:eV969zFe3ABQB60XAyNBhC1TPdwwDZnfmlvj7Fjw7tZe2AATAholA3zoMGAmAlS5AdrtWhiMz67mjBSIAHlwErE4Eys5I%4WJQJFRgB0BcMYBWK1VVOYJvK0G8FXDgJmpwNnJJNOq95dPBY6GxkoXINLHXm2iD:8e1wJMAwAAAPimLkBfKNr1wbDYL1wGevclnrNiZeZKvLawrn1Tsbh:mAIdea9yUWxHgXL0newYPYhU:BeH3:8t7iTGoEcTYyI7X7gSXzxQ%pkH3EnrXA6kwehELwZAZd77jp3:6jn25XUuBsDKvIn%aaZuIQCOi7uBccVfu8TzJ5YpBMRdw3S7Dsp2d0jcFABHJ7bZLMxSAITOPgvJszrH4Kplnj4ePZtsdNaFXAIgHwCzLk70O4u00iPzQA67AKsBYAbY:QEQDbQdAZCeb7AQANlaQg8eSKVJODcFQEscY:2OFoAAuDcAenKHfHsL4KoaQN8YAO3JAXDXjvWWZUo3Fi1%T9HXEQCxAFitAVRGAboA%L0AyDQntQB%ZxTgawKgbT5rWGZfADy98PmNw4D9hDA9ex6AAHhxALTCDlcpzN0xESh7N%Ny%BUmz6W25bcHwK8MAz5xmfQ4fyYAAAB4lYV%W2WZ8ntdWLE%a6w%%rnK:d:B7MBSEapQtJr2OzcPd466Stl%d1vcL3ev:47fnRzfDehHil7fEADRg:L:%ufrA54cAC0ZAH0hRKP7zWrlffYdnrH%:8z%S3wnw%3x5AB4wo9M9OgsqsyIyGznOXiNpwRA%cdFAwHQiwdY5nZz24beLgyA0POF7fXIAOgCYEsArM4OHDZ3K3MNPr1HsAvwLQFQ2QfuCIDp8X:1xRktMAb8xADI3oykR3aejS2As3e2WQBmuwCh2XWR76EQAKn5CYkAyN6YdWcATLfHGS2AUB8qUqg5IQCyZ%0dAbB6A5FvCIBpAG4IgMgBuKMOs:L31VZgprAbDYDISelxAZBJ%icEQOQM%JYAaCcGQCRkvzkA2gktgMcGQLUa:qsBEOmDvrkFEAmZlem1uwIgul%e8v6TY%nj%jwlAK4aBszc5HLXb:OlbwChBvB1w3S7rsrcMQyYWp9dE4F2tACixZZMwS1Sa4iclaOfvfpl7J4ItDoKUAmA6ChA9vEdE22unGhUKQTvngi0HgAAwBsFmjStj%85H%4fJqrkK1XW7PusfO4267MFXmf5Ry4K3bUd8zGyl5LP9ouWnNhz5fqt:Jz9jh:eaZPt82n7zbsCkx0p8qMTpVly0f74QhHlzAM3e3Cnt9:mmsXqkO2OkY%j73PlADx7:cLPT0IhWmCuDDtG5018Hg5MBEB4I24KgEqV9fCgG2y0UbJGfklntExPvE41AHbdvjtSVGueP34%%ljhuWhApNd:OmEgGACZivVqAES6CIf:Ty6zKwDaSoBuCIDV%:LtqGq:4vnMaMislbI47yG8:pEA%NQNOKMGEOnbRoY9Dpv4hQBogc89W6YvbL:RWTvbVVr58YoWbHHd9Xy:8fkrAmB5KLfPrgpM9AF31gBmBZ8WbW0sBMCoCxD53Jm5631SS%iZ6bY3tgD6g57:9QA4df0zATBrUle7AL3QBajULKotgJ7YNq34Oh8PxItrAE88w0afT02s2vj8TwVA5HbS4aGajUXAXmgBRIuAkQCYtQBmFf7Z65wZALunbT:9%S0:v5V4:hUBkG26nzkMGB3WWR0G:DTEslIoTBdILx4G:IUA0AU4OQB2TQRa%dGJzCW3K8tkg6QXt9:H7lG0T9x7%cKjzDj8E2sAbxgFSA:lpkcBAIA36uZ0r95A87ZLb0dNwwubwj3Ypeib3qe8TXYXHE8YuSjf0TnTXR7WAPr75nQ:oth08utdVey7YjtfXjDb%Bkzdz5OTYjbEQBvndP9hGpyWz0bDV4v20JZWZ8rg3bUCjnzO15piaTu5Bvcn6OtrT4KgDurqYab9o5:7w6UzESvuwLgyn1sR3d2NpktfULLrMffAeAA:K0AuHNCzZ0BcObPju1sAVQme2VbAAJgsai2swgYev2n1xS%pAtw6g05T:iMoYL3Qg1gfCmwANj3O3qrrz8qdlXOMhdOqNlZIMs041e7oeV77G%YvXf2KECqBqAJvi%1zzhjhy5F:rsfCdF5AFoAyTNPoQWQGbePvF8P9e8gOBHoEXOq75hTDgAAagDRX26tTNsdVV%n96SbvE90eCqzvtG57ZHHZxX62XbKzo%vfAc9UlGe1SMKle:hfhGsl0wr7rN1emXXsO::Jd3Mztd77GYjoesLisukboz5ofgXebxP5ulH5:Nn7iufDZfZ9NXKXaHDP3Ra3C6Hn59cAGR%mz16YU9mmmovpnv27N6rZ6fEWaolWgB91DLYEAA7JwrNAizz%wKHrzHbhpwbALPbV:9:Yl748KBJNrHPDIDVFsA0LIsB0B0QPKkF8PGAq1x5V2jC3tUFaNGw21kDgG%pAbRNNYDZ2fGUIiAIgAtHAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOBJ:gftRTGpohTMmwAAAABJRU5ErkJggg");
feint_input_device_Keyboard.supportedKeyCodes = [13,37,38,39,40,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,192,27];
feint_library_BitmapTextComponent.__meta__ = { obj : { shape : ["bitmapText"]}};
feint_library_PositionComponent.__meta__ = { obj : { shape : ["position"]}};
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
MicroAdventure.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=main.js.map